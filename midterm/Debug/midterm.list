
midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003400  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800369c  0800369c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800369c  0800369c  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800369c  0800369c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080036a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200000b4  08003758  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003758  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d23f  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002398  00000000  00000000  0002d31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018e73  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d43d  00000000  00000000  000490ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00087e69  00000000  00000000  000564e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000de351  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a40  00000000  00000000  000de3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003330  00000000  00000000  000dede8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	080034f4 	.word	0x080034f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	080034f4 	.word	0x080034f4

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000150:	2003      	movs	r0, #3
 8000152:	f000 faf1 	bl	8000738 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230d      	movs	r3, #13
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000160:	2000      	movs	r0, #0
 8000162:	f000 fae9 	bl	8000738 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230a      	movs	r3, #10
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000170:	2001      	movs	r0, #1
 8000172:	f000 fae1 	bl	8000738 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230b      	movs	r3, #11
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000180:	2002      	movs	r0, #2
 8000182:	f000 fad9 	bl	8000738 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230c      	movs	r3, #12
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // None of these buttons are pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}

08000196 <WhichButtonIsPressed1s>:

int WhichButtonIsPressed1s() {
 8000196:	b580      	push	{r7, lr}
 8000198:	af00      	add	r7, sp, #0
	if (is_button_pressed_1s(3)) return button_reset_is_pressed_1s;
 800019a:	2003      	movs	r0, #3
 800019c:	f000 fae6 	bl	800076c <is_button_pressed_1s>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <WhichButtonIsPressed1s+0x14>
 80001a6:	2311      	movs	r3, #17
 80001a8:	e018      	b.n	80001dc <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(0)) return button_mode_is_pressed_1s;
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 fade 	bl	800076c <is_button_pressed_1s>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <WhichButtonIsPressed1s+0x24>
 80001b6:	230e      	movs	r3, #14
 80001b8:	e010      	b.n	80001dc <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(1)) return button_add_is_pressed_1s;
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 fad6 	bl	800076c <is_button_pressed_1s>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <WhichButtonIsPressed1s+0x34>
 80001c6:	230f      	movs	r3, #15
 80001c8:	e008      	b.n	80001dc <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(2)) return button_confirm_is_pressed_1s;
 80001ca:	2002      	movs	r0, #2
 80001cc:	f000 face 	bl	800076c <is_button_pressed_1s>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <WhichButtonIsPressed1s+0x44>
 80001d6:	2310      	movs	r3, #16
 80001d8:	e000      	b.n	80001dc <WhichButtonIsPressed1s+0x46>

	return 0; // None of these buttons are pressed
 80001da:	2300      	movs	r3, #0
}
 80001dc:	4618      	mov	r0, r3
 80001de:	bd80      	pop	{r7, pc}

080001e0 <fsm_mode_running>:
void fsm_mode_running() {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	switch(WhichButtonIsPressed()) {
 80001e4:	f7ff ffb2 	bl	800014c <WhichButtonIsPressed>
 80001e8:	4603      	mov	r3, r0
 80001ea:	3b0a      	subs	r3, #10
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	f200 8098 	bhi.w	8000322 <fsm_mode_running+0x142>
 80001f2:	a201      	add	r2, pc, #4	; (adr r2, 80001f8 <fsm_mode_running+0x18>)
 80001f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f8:	08000209 	.word	0x08000209
 80001fc:	080002e1 	.word	0x080002e1
 8000200:	08000317 	.word	0x08000317
 8000204:	0800031d 	.word	0x0800031d
		// NORMAL MODE
		case button_mode_is_pressed:
			switch(status) {
 8000208:	4b47      	ldr	r3, [pc, #284]	; (8000328 <fsm_mode_running+0x148>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3b01      	subs	r3, #1
 800020e:	2b06      	cmp	r3, #6
 8000210:	d861      	bhi.n	80002d6 <fsm_mode_running+0xf6>
 8000212:	a201      	add	r2, pc, #4	; (adr r2, 8000218 <fsm_mode_running+0x38>)
 8000214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000218:	08000235 	.word	0x08000235
 800021c:	0800025f 	.word	0x0800025f
 8000220:	08000281 	.word	0x08000281
 8000224:	080002a7 	.word	0x080002a7
 8000228:	0800025f 	.word	0x0800025f
 800022c:	08000281 	.word	0x08000281
 8000230:	080002a7 	.word	0x080002a7
				// NORMAL MODE - Automatic Running
				case NORMAL_MODE:
					led_init();
 8000234:	f000 fb2c 	bl	8000890 <led_init>
					status = RED_MODE;
 8000238:	4b3b      	ldr	r3, [pc, #236]	; (8000328 <fsm_mode_running+0x148>)
 800023a:	2202      	movs	r2, #2
 800023c:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '2 - RED_MODE' \r\n");
 800023e:	483b      	ldr	r0, [pc, #236]	; (800032c <fsm_mode_running+0x14c>)
 8000240:	f002 fd04 	bl	8002c4c <puts>
					light_time = man_red_time;
 8000244:	4b3a      	ldr	r3, [pc, #232]	; (8000330 <fsm_mode_running+0x150>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a3a      	ldr	r2, [pc, #232]	; (8000334 <fsm_mode_running+0x154>)
 800024a:	6013      	str	r3, [r2, #0]
					temp_value = light_time;
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <fsm_mode_running+0x154>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a39      	ldr	r2, [pc, #228]	; (8000338 <fsm_mode_running+0x158>)
 8000252:	6013      	str	r3, [r2, #0]
					// Adjust frequency scanning process of single RED LED
					setTimer1(DURATION_HALF_OF_SECOND);
 8000254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000258:	f000 fcf0 	bl	8000c3c <setTimer1>
					break;
 800025c:	e03c      	b.n	80002d8 <fsm_mode_running+0xf8>
				// RED && MAN_RED MODE
				case RED_MODE: case MAN_RED_MODE:
					led_init();
 800025e:	f000 fb17 	bl	8000890 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_amber_time;
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <fsm_mode_running+0x15c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a33      	ldr	r2, [pc, #204]	; (8000334 <fsm_mode_running+0x154>)
 8000268:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 800026a:	4b32      	ldr	r3, [pc, #200]	; (8000334 <fsm_mode_running+0x154>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a32      	ldr	r2, [pc, #200]	; (8000338 <fsm_mode_running+0x158>)
 8000270:	6013      	str	r3, [r2, #0]
					status = AMBER_MODE;
 8000272:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <fsm_mode_running+0x148>)
 8000274:	2203      	movs	r2, #3
 8000276:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '3 - AMBER_MODE' \r\n");
 8000278:	4831      	ldr	r0, [pc, #196]	; (8000340 <fsm_mode_running+0x160>)
 800027a:	f002 fce7 	bl	8002c4c <puts>
					break;
 800027e:	e02b      	b.n	80002d8 <fsm_mode_running+0xf8>
				// AMBER && MAN_AMBER MODE
				case AMBER_MODE: case MAN_AMBER_MODE:
					GPIOB->BSRR = 0x3F00;
 8000280:	4b30      	ldr	r3, [pc, #192]	; (8000344 <fsm_mode_running+0x164>)
 8000282:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000286:	611a      	str	r2, [r3, #16]
					// restore light_time if is not pressed button confirm
					light_time = man_green_time;
 8000288:	4b2f      	ldr	r3, [pc, #188]	; (8000348 <fsm_mode_running+0x168>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a29      	ldr	r2, [pc, #164]	; (8000334 <fsm_mode_running+0x154>)
 800028e:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 8000290:	4b28      	ldr	r3, [pc, #160]	; (8000334 <fsm_mode_running+0x154>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a28      	ldr	r2, [pc, #160]	; (8000338 <fsm_mode_running+0x158>)
 8000296:	6013      	str	r3, [r2, #0]
					status = GREEN_MODE;
 8000298:	4b23      	ldr	r3, [pc, #140]	; (8000328 <fsm_mode_running+0x148>)
 800029a:	2204      	movs	r2, #4
 800029c:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '4 - GREEN_MODE' \r\n");
 800029e:	482b      	ldr	r0, [pc, #172]	; (800034c <fsm_mode_running+0x16c>)
 80002a0:	f002 fcd4 	bl	8002c4c <puts>
					break;
 80002a4:	e018      	b.n	80002d8 <fsm_mode_running+0xf8>
				// GREEN && MAN_GREEN MODE
				case GREEN_MODE: case MAN_GREEN_MODE:
					led_init();
 80002a6:	f000 faf3 	bl	8000890 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_red_time;
 80002aa:	4b21      	ldr	r3, [pc, #132]	; (8000330 <fsm_mode_running+0x150>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a21      	ldr	r2, [pc, #132]	; (8000334 <fsm_mode_running+0x154>)
 80002b0:	6013      	str	r3, [r2, #0]
					// assign temp value = light_time and then
					// if button add is pressed it will increase temp_value;
					temp_value = light_time;
 80002b2:	4b20      	ldr	r3, [pc, #128]	; (8000334 <fsm_mode_running+0x154>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a20      	ldr	r2, [pc, #128]	; (8000338 <fsm_mode_running+0x158>)
 80002b8:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80002ba:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <fsm_mode_running+0x148>)
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '1 - NORMAL' \r\n");
 80002c0:	4823      	ldr	r0, [pc, #140]	; (8000350 <fsm_mode_running+0x170>)
 80002c2:	f002 fcc3 	bl	8002c4c <puts>
					// re-initialize traffic light
					traffic_init();
 80002c6:	f000 feb3 	bl	8001030 <traffic_init>
					// update the new buffer to display it at LED 7 SEG
					update_buffer();
 80002ca:	f000 fa83 	bl	80007d4 <update_buffer>
					setTimer3(DURATION_1S);
 80002ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d2:	f000 fce7 	bl	8000ca4 <setTimer3>
				default:
					break;
 80002d6:	bf00      	nop
			}
			buttonState = BUTTON_PRESSED;
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <fsm_mode_running+0x174>)
 80002da:	2201      	movs	r2, #1
 80002dc:	701a      	strb	r2, [r3, #0]
			break;
 80002de:	e021      	b.n	8000324 <fsm_mode_running+0x144>
		// ADD BUTTON
		case button_add_is_pressed:
			// Increasing time depending on current state
			switch(status) {
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <fsm_mode_running+0x148>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b04      	cmp	r3, #4
 80002e6:	d00e      	beq.n	8000306 <fsm_mode_running+0x126>
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	dc10      	bgt.n	800030e <fsm_mode_running+0x12e>
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d002      	beq.n	80002f6 <fsm_mode_running+0x116>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d004      	beq.n	80002fe <fsm_mode_running+0x11e>
				break;
			case GREEN_MODE:
				status = MAN_GREEN_MODE;
				break;
			default:
				break;
 80002f4:	e00b      	b.n	800030e <fsm_mode_running+0x12e>
				status = MAN_RED_MODE;
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <fsm_mode_running+0x148>)
 80002f8:	2205      	movs	r2, #5
 80002fa:	601a      	str	r2, [r3, #0]
				break;
 80002fc:	e008      	b.n	8000310 <fsm_mode_running+0x130>
				status = MAN_AMBER_MODE;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <fsm_mode_running+0x148>)
 8000300:	2206      	movs	r2, #6
 8000302:	601a      	str	r2, [r3, #0]
				break;
 8000304:	e004      	b.n	8000310 <fsm_mode_running+0x130>
				status = MAN_GREEN_MODE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <fsm_mode_running+0x148>)
 8000308:	2207      	movs	r2, #7
 800030a:	601a      	str	r2, [r3, #0]
				break;
 800030c:	e000      	b.n	8000310 <fsm_mode_running+0x130>
				break;
 800030e:	bf00      	nop
			}
			// If the button add is pressed then temp_value++. Finally update light_time = temp_value,
			updateTempTime();
 8000310:	f000 feb2 	bl	8001078 <updateTempTime>
			break;
 8000314:	e006      	b.n	8000324 <fsm_mode_running+0x144>
		// CONFIRM BUTTON
		case button_confirm_is_pressed:
			// If the button confirm is pressed, then man_red/yellow/green_time = temp_value was stored before
			confirmAdjustedTime();
 8000316:	f000 feff 	bl	8001118 <confirmAdjustedTime>
			break;
 800031a:	e003      	b.n	8000324 <fsm_mode_running+0x144>
		case button_reset_is_pressed:
			resetToTheDefaultSetting();
 800031c:	f000 ff44 	bl	80011a8 <resetToTheDefaultSetting>
			break;
 8000320:	e000      	b.n	8000324 <fsm_mode_running+0x144>
		default:
			break;
 8000322:	bf00      	nop
	}
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000014 	.word	0x20000014
 800032c:	0800350c 	.word	0x0800350c
 8000330:	20000000 	.word	0x20000000
 8000334:	2000000c 	.word	0x2000000c
 8000338:	200000d0 	.word	0x200000d0
 800033c:	20000004 	.word	0x20000004
 8000340:	08003534 	.word	0x08003534
 8000344:	40010c00 	.word	0x40010c00
 8000348:	20000008 	.word	0x20000008
 800034c:	08003560 	.word	0x08003560
 8000350:	0800358c 	.word	0x0800358c
 8000354:	200000ec 	.word	0x200000ec

08000358 <fsm_mode_running_for_pressed_1s>:

void fsm_mode_running_for_pressed_1s() {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 800035c:	4b58      	ldr	r3, [pc, #352]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d007      	beq.n	8000374 <fsm_mode_running_for_pressed_1s+0x1c>
 8000364:	4b56      	ldr	r3, [pc, #344]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b04      	cmp	r3, #4
 800036a:	d003      	beq.n	8000374 <fsm_mode_running_for_pressed_1s+0x1c>
 800036c:	4b54      	ldr	r3, [pc, #336]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b03      	cmp	r3, #3
 8000372:	d103      	bne.n	800037c <fsm_mode_running_for_pressed_1s+0x24>
		light_time1 = status;
 8000374:	4b52      	ldr	r3, [pc, #328]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a52      	ldr	r2, [pc, #328]	; (80004c4 <fsm_mode_running_for_pressed_1s+0x16c>)
 800037a:	6013      	str	r3, [r2, #0]
	switch(WhichButtonIsPressed1s()) {
 800037c:	f7ff ff0b 	bl	8000196 <WhichButtonIsPressed1s>
 8000380:	4603      	mov	r3, r0
 8000382:	3b0c      	subs	r3, #12
 8000384:	2b03      	cmp	r3, #3
 8000386:	f200 8098 	bhi.w	80004ba <fsm_mode_running_for_pressed_1s+0x162>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <fsm_mode_running_for_pressed_1s+0x38>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080004af 	.word	0x080004af
 8000394:	080004b5 	.word	0x080004b5
 8000398:	080003a1 	.word	0x080003a1
 800039c:	08000479 	.word	0x08000479
		// NORMAL MODE
		case button_mode_is_pressed_1s:
			switch(status) {
 80003a0:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	2b06      	cmp	r3, #6
 80003a8:	d861      	bhi.n	800046e <fsm_mode_running_for_pressed_1s+0x116>
 80003aa:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <fsm_mode_running_for_pressed_1s+0x58>)
 80003ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b0:	080003cd 	.word	0x080003cd
 80003b4:	080003f7 	.word	0x080003f7
 80003b8:	08000419 	.word	0x08000419
 80003bc:	0800043f 	.word	0x0800043f
 80003c0:	080003f7 	.word	0x080003f7
 80003c4:	08000419 	.word	0x08000419
 80003c8:	0800043f 	.word	0x0800043f
				// NORMAL MODE - Automatic Running
				case NORMAL_MODE:
					led_init();
 80003cc:	f000 fa60 	bl	8000890 <led_init>
					status = RED_MODE;
 80003d0:	4b3b      	ldr	r3, [pc, #236]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 80003d2:	2202      	movs	r2, #2
 80003d4:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '2 - RED_MODE' \r\n");
 80003d6:	483c      	ldr	r0, [pc, #240]	; (80004c8 <fsm_mode_running_for_pressed_1s+0x170>)
 80003d8:	f002 fc38 	bl	8002c4c <puts>
					light_time = man_red_time;
 80003dc:	4b3b      	ldr	r3, [pc, #236]	; (80004cc <fsm_mode_running_for_pressed_1s+0x174>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a3b      	ldr	r2, [pc, #236]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 80003e2:	6013      	str	r3, [r2, #0]
					temp_value = light_time;
 80003e4:	4b3a      	ldr	r3, [pc, #232]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <fsm_mode_running_for_pressed_1s+0x17c>)
 80003ea:	6013      	str	r3, [r2, #0]
					// Adjust frequency scanning process of single RED LED
					setTimer1(DURATION_HALF_OF_SECOND);
 80003ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f0:	f000 fc24 	bl	8000c3c <setTimer1>
					break;
 80003f4:	e03c      	b.n	8000470 <fsm_mode_running_for_pressed_1s+0x118>
				// RED && MAN_RED MODE
				case RED_MODE: case MAN_RED_MODE:
					led_init();
 80003f6:	f000 fa4b 	bl	8000890 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_amber_time;
 80003fa:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <fsm_mode_running_for_pressed_1s+0x180>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a34      	ldr	r2, [pc, #208]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 8000400:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a33      	ldr	r2, [pc, #204]	; (80004d4 <fsm_mode_running_for_pressed_1s+0x17c>)
 8000408:	6013      	str	r3, [r2, #0]
					status = AMBER_MODE;
 800040a:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 800040c:	2203      	movs	r2, #3
 800040e:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '3 - AMBER_MODE' \r\n");
 8000410:	4832      	ldr	r0, [pc, #200]	; (80004dc <fsm_mode_running_for_pressed_1s+0x184>)
 8000412:	f002 fc1b 	bl	8002c4c <puts>
					break;
 8000416:	e02b      	b.n	8000470 <fsm_mode_running_for_pressed_1s+0x118>
				// AMBER && MAN_AMBER MODE
				case AMBER_MODE: case MAN_AMBER_MODE:
					GPIOB->BSRR = 0x3F00;
 8000418:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <fsm_mode_running_for_pressed_1s+0x188>)
 800041a:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800041e:	611a      	str	r2, [r3, #16]
					// restore light_time if is not pressed button confirm
					light_time = man_green_time;
 8000420:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <fsm_mode_running_for_pressed_1s+0x18c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a2a      	ldr	r2, [pc, #168]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 8000426:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 8000428:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <fsm_mode_running_for_pressed_1s+0x17c>)
 800042e:	6013      	str	r3, [r2, #0]
					status = GREEN_MODE;
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 8000432:	2204      	movs	r2, #4
 8000434:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '4 - GREEN_MODE' \r\n");
 8000436:	482c      	ldr	r0, [pc, #176]	; (80004e8 <fsm_mode_running_for_pressed_1s+0x190>)
 8000438:	f002 fc08 	bl	8002c4c <puts>
					break;
 800043c:	e018      	b.n	8000470 <fsm_mode_running_for_pressed_1s+0x118>
				// GREEN && MAN_GREEN MODE
				case GREEN_MODE: case MAN_GREEN_MODE:
					led_init();
 800043e:	f000 fa27 	bl	8000890 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_red_time;
 8000442:	4b22      	ldr	r3, [pc, #136]	; (80004cc <fsm_mode_running_for_pressed_1s+0x174>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 8000448:	6013      	str	r3, [r2, #0]
					// assign temp value = light_time and then
					// if button add is pressed it will increase temp_value;
					temp_value = light_time;
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <fsm_mode_running_for_pressed_1s+0x178>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a21      	ldr	r2, [pc, #132]	; (80004d4 <fsm_mode_running_for_pressed_1s+0x17c>)
 8000450:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000452:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 8000454:	2201      	movs	r2, #1
 8000456:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '1 - NORMAL' \r\n");
 8000458:	4824      	ldr	r0, [pc, #144]	; (80004ec <fsm_mode_running_for_pressed_1s+0x194>)
 800045a:	f002 fbf7 	bl	8002c4c <puts>
					// re-initialize traffic light
					traffic_init();
 800045e:	f000 fde7 	bl	8001030 <traffic_init>
					// update the new buffer to display it at LED 7 SEG
					update_buffer();
 8000462:	f000 f9b7 	bl	80007d4 <update_buffer>
					setTimer3(DURATION_1S);
 8000466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046a:	f000 fc1b 	bl	8000ca4 <setTimer3>
				default:
					break;
 800046e:	bf00      	nop
			}
			buttonState = BUTTON_PRESSED;
 8000470:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <fsm_mode_running_for_pressed_1s+0x198>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
			break;
 8000476:	e021      	b.n	80004bc <fsm_mode_running_for_pressed_1s+0x164>
		// ADD BUTTON
		case button_add_is_pressed_1s:
			// Increasing time depending on current state
			switch(status) {
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b04      	cmp	r3, #4
 800047e:	d00e      	beq.n	800049e <fsm_mode_running_for_pressed_1s+0x146>
 8000480:	2b04      	cmp	r3, #4
 8000482:	dc10      	bgt.n	80004a6 <fsm_mode_running_for_pressed_1s+0x14e>
 8000484:	2b02      	cmp	r3, #2
 8000486:	d002      	beq.n	800048e <fsm_mode_running_for_pressed_1s+0x136>
 8000488:	2b03      	cmp	r3, #3
 800048a:	d004      	beq.n	8000496 <fsm_mode_running_for_pressed_1s+0x13e>
				break;
			case GREEN_MODE:
				status = MAN_GREEN_MODE;
				break;
			default:
				break;
 800048c:	e00b      	b.n	80004a6 <fsm_mode_running_for_pressed_1s+0x14e>
				status = MAN_RED_MODE;
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 8000490:	2205      	movs	r2, #5
 8000492:	601a      	str	r2, [r3, #0]
				break;
 8000494:	e008      	b.n	80004a8 <fsm_mode_running_for_pressed_1s+0x150>
				status = MAN_AMBER_MODE;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 8000498:	2206      	movs	r2, #6
 800049a:	601a      	str	r2, [r3, #0]
				break;
 800049c:	e004      	b.n	80004a8 <fsm_mode_running_for_pressed_1s+0x150>
				status = MAN_GREEN_MODE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <fsm_mode_running_for_pressed_1s+0x168>)
 80004a0:	2207      	movs	r2, #7
 80004a2:	601a      	str	r2, [r3, #0]
				break;
 80004a4:	e000      	b.n	80004a8 <fsm_mode_running_for_pressed_1s+0x150>
				break;
 80004a6:	bf00      	nop
			}
			// If the button add is pressed then temp_value++. Finally update light_time = temp_value,
			updateTempTime();
 80004a8:	f000 fde6 	bl	8001078 <updateTempTime>
			break;
 80004ac:	e006      	b.n	80004bc <fsm_mode_running_for_pressed_1s+0x164>
		// CONFIRM BUTTON
		case button_confirm_is_pressed:
			// If the button confirm is pressed, then man_red/yellow/green_time = temp_value was stored before
			confirmAdjustedTime();
 80004ae:	f000 fe33 	bl	8001118 <confirmAdjustedTime>
			break;
 80004b2:	e003      	b.n	80004bc <fsm_mode_running_for_pressed_1s+0x164>
		case button_reset_is_pressed:
			resetToTheDefaultSetting();
 80004b4:	f000 fe78 	bl	80011a8 <resetToTheDefaultSetting>
			break;
 80004b8:	e000      	b.n	80004bc <fsm_mode_running_for_pressed_1s+0x164>
		default:
			break;
 80004ba:	bf00      	nop
	}
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000014 	.word	0x20000014
 80004c4:	20000010 	.word	0x20000010
 80004c8:	0800350c 	.word	0x0800350c
 80004cc:	20000000 	.word	0x20000000
 80004d0:	2000000c 	.word	0x2000000c
 80004d4:	200000d0 	.word	0x200000d0
 80004d8:	20000004 	.word	0x20000004
 80004dc:	08003534 	.word	0x08003534
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	20000008 	.word	0x20000008
 80004e8:	08003560 	.word	0x08003560
 80004ec:	0800358c 	.word	0x0800358c
 80004f0:	200000ec 	.word	0x200000ec

080004f4 <fsm_for_input_processing>:

void fsm_for_input_processing() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	// Only display 3 MODE to modify value.
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 80004fa:	4b37      	ldr	r3, [pc, #220]	; (80005d8 <fsm_for_input_processing+0xe4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d007      	beq.n	8000512 <fsm_for_input_processing+0x1e>
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <fsm_for_input_processing+0xe4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b04      	cmp	r3, #4
 8000508:	d003      	beq.n	8000512 <fsm_for_input_processing+0x1e>
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <fsm_for_input_processing+0xe4>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b03      	cmp	r3, #3
 8000510:	d103      	bne.n	800051a <fsm_for_input_processing+0x26>
		light_time1 = status;
 8000512:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <fsm_for_input_processing+0xe4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a31      	ldr	r2, [pc, #196]	; (80005dc <fsm_for_input_processing+0xe8>)
 8000518:	6013      	str	r3, [r2, #0]
	switch(buttonState) {
 800051a:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <fsm_for_input_processing+0xec>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d031      	beq.n	8000586 <fsm_for_input_processing+0x92>
 8000522:	2b02      	cmp	r3, #2
 8000524:	dc53      	bgt.n	80005ce <fsm_for_input_processing+0xda>
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <fsm_for_input_processing+0x3c>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d00d      	beq.n	800054a <fsm_for_input_processing+0x56>
					flagForButtonPressOneQuarterSecond[i] = 0;
				}
			}
			break;
		default:
			break;
 800052e:	e04e      	b.n	80005ce <fsm_for_input_processing+0xda>
			AllowToExecuteAfterASecondPressed = 0;
 8000530:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <fsm_for_input_processing+0xf0>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
			if (WhichButtonIsPressed()) {
 8000536:	f7ff fe09 	bl	800014c <WhichButtonIsPressed>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d004      	beq.n	800054a <fsm_for_input_processing+0x56>
				buttonState = BUTTON_PRESSED;
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <fsm_for_input_processing+0xec>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
				fsm_mode_running();
 8000546:	f7ff fe4b 	bl	80001e0 <fsm_mode_running>
			if (!WhichButtonIsPressed()) {
 800054a:	f7ff fdff 	bl	800014c <WhichButtonIsPressed>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d103      	bne.n	800055c <fsm_for_input_processing+0x68>
				buttonState = BUTTON_RELEASED;
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <fsm_for_input_processing+0xec>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			break;
 800055a:	e039      	b.n	80005d0 <fsm_for_input_processing+0xdc>
				for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	e00d      	b.n	800057e <fsm_for_input_processing+0x8a>
					if (is_button_pressed_1s(i))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f900 	bl	800076c <is_button_pressed_1s>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <fsm_for_input_processing+0x84>
						buttonState = BUTTON_PRESS_MORE_THAN_1S;
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <fsm_for_input_processing+0xec>)
 8000574:	2202      	movs	r2, #2
 8000576:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b03      	cmp	r3, #3
 8000582:	ddee      	ble.n	8000562 <fsm_for_input_processing+0x6e>
			break;
 8000584:	e024      	b.n	80005d0 <fsm_for_input_processing+0xdc>
			if (!WhichButtonIsPressed()) {
 8000586:	f7ff fde1 	bl	800014c <WhichButtonIsPressed>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <fsm_for_input_processing+0xa2>
				buttonState = BUTTON_RELEASED;
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <fsm_for_input_processing+0xec>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
			AllowToExecuteAfterASecondPressed = 1; // Allow the system to count for pressed button each half a second
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <fsm_for_input_processing+0xf0>)
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	e011      	b.n	80005c6 <fsm_for_input_processing+0xd2>
				if (is_button_pressed_one_quarter_second(i)) {
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f8fa 	bl	80007a0 <is_button_pressed_one_quarter_second>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d006      	beq.n	80005c0 <fsm_for_input_processing+0xcc>
					fsm_mode_running_for_pressed_1s();
 80005b2:	f7ff fed1 	bl	8000358 <fsm_mode_running_for_pressed_1s>
					flagForButtonPressOneQuarterSecond[i] = 0;
 80005b6:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <fsm_for_input_processing+0xf4>)
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2100      	movs	r1, #0
 80005bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	ddea      	ble.n	80005a2 <fsm_for_input_processing+0xae>
			break;
 80005cc:	e000      	b.n	80005d0 <fsm_for_input_processing+0xdc>
			break;
 80005ce:	bf00      	nop
	}
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000014 	.word	0x20000014
 80005dc:	20000010 	.word	0x20000010
 80005e0:	200000ec 	.word	0x200000ec
 80005e4:	200000d8 	.word	0x200000d8
 80005e8:	200000dc 	.word	0x200000dc

080005ec <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	e081      	b.n	80006fc <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80005f8:	4a45      	ldr	r2, [pc, #276]	; (8000710 <button_reading+0x124>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	7819      	ldrb	r1, [r3, #0]
 8000600:	4a44      	ldr	r2, [pc, #272]	; (8000714 <button_reading+0x128>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	460a      	mov	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800060a:	4a43      	ldr	r2, [pc, #268]	; (8000718 <button_reading+0x12c>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000612:	4942      	ldr	r1, [pc, #264]	; (800071c <button_reading+0x130>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800061a:	4619      	mov	r1, r3
 800061c:	4610      	mov	r0, r2
 800061e:	f001 fa61 	bl	8001ae4 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	4619      	mov	r1, r3
 8000626:	4a3a      	ldr	r2, [pc, #232]	; (8000710 <button_reading+0x124>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	460a      	mov	r2, r1
 800062e:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000630:	4a37      	ldr	r2, [pc, #220]	; (8000710 <button_reading+0x124>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4936      	ldr	r1, [pc, #216]	; (8000714 <button_reading+0x128>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	440b      	add	r3, r1
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d158      	bne.n	80006f6 <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000644:	4a32      	ldr	r2, [pc, #200]	; (8000710 <button_reading+0x124>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	7819      	ldrb	r1, [r3, #0]
 800064c:	4a34      	ldr	r2, [pc, #208]	; (8000720 <button_reading+0x134>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	460a      	mov	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000656:	4a32      	ldr	r2, [pc, #200]	; (8000720 <button_reading+0x134>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d135      	bne.n	80006ce <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 8000662:	4a30      	ldr	r2, [pc, #192]	; (8000724 <button_reading+0x138>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066a:	2b18      	cmp	r3, #24
 800066c:	d80e      	bhi.n	800068c <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <button_reading+0x13c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d00a      	beq.n	800068c <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 8000676:	4a2b      	ldr	r2, [pc, #172]	; (8000724 <button_reading+0x138>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067e:	3301      	adds	r3, #1
 8000680:	b299      	uxth	r1, r3
 8000682:	4a28      	ldr	r2, [pc, #160]	; (8000724 <button_reading+0x138>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800068a:	e009      	b.n	80006a0 <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 800068c:	4a25      	ldr	r2, [pc, #148]	; (8000724 <button_reading+0x138>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2100      	movs	r1, #0
 8000692:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 8000696:	4a25      	ldr	r2, [pc, #148]	; (800072c <button_reading+0x140>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2101      	movs	r1, #1
 800069c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80006a0:	4a23      	ldr	r2, [pc, #140]	; (8000730 <button_reading+0x144>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a8:	2b63      	cmp	r3, #99	; 0x63
 80006aa:	d80a      	bhi.n	80006c2 <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <button_reading+0x144>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b299      	uxth	r1, r3
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <button_reading+0x144>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006c0:	e019      	b.n	80006f6 <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <button_reading+0x148>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e013      	b.n	80006f6 <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <button_reading+0x144>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2100      	movs	r1, #0
 80006d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <button_reading+0x138>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2100      	movs	r1, #0
 80006de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <button_reading+0x148>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <button_reading+0x140>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2100      	movs	r1, #0
 80006f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	f77f af7a 	ble.w	80005f8 <button_reading+0xc>
			}
		}
	}
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000f4 	.word	0x200000f4
 8000714:	200000f8 	.word	0x200000f8
 8000718:	2000001c 	.word	0x2000001c
 800071c:	2000002c 	.word	0x2000002c
 8000720:	200000f0 	.word	0x200000f0
 8000724:	20000108 	.word	0x20000108
 8000728:	200000d8 	.word	0x200000d8
 800072c:	200000dc 	.word	0x200000dc
 8000730:	20000100 	.word	0x20000100
 8000734:	200000fc 	.word	0x200000fc

08000738 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d901      	bls.n	800074c <is_button_pressed+0x14>
 8000748:	2300      	movs	r3, #0
 800074a:	e007      	b.n	800075c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <is_button_pressed+0x30>)
 8000750:	5cd3      	ldrb	r3, [r2, r3]
 8000752:	2b00      	cmp	r3, #0
 8000754:	bf0c      	ite	eq
 8000756:	2301      	moveq	r3, #1
 8000758:	2300      	movne	r3, #0
 800075a:	b2db      	uxtb	r3, r3
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000f0 	.word	0x200000f0

0800076c <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d901      	bls.n	8000780 <is_button_pressed_1s+0x14>
 800077c:	23ff      	movs	r3, #255	; 0xff
 800077e:	e007      	b.n	8000790 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <is_button_pressed_1s+0x30>)
 8000784:	5cd3      	ldrb	r3, [r2, r3]
 8000786:	2b01      	cmp	r3, #1
 8000788:	bf0c      	ite	eq
 800078a:	2301      	moveq	r3, #1
 800078c:	2300      	movne	r3, #0
 800078e:	b2db      	uxtb	r3, r3
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	200000fc 	.word	0x200000fc

080007a0 <is_button_pressed_one_quarter_second>:

unsigned char is_button_pressed_one_quarter_second(unsigned char index) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff ;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d901      	bls.n	80007b4 <is_button_pressed_one_quarter_second+0x14>
 80007b0:	23ff      	movs	r3, #255	; 0xff
 80007b2:	e008      	b.n	80007c6 <is_button_pressed_one_quarter_second+0x26>
	return (flagForButtonPressOneQuarterSecond[index] == 1) ;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <is_button_pressed_one_quarter_second+0x30>)
 80007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	200000dc 	.word	0x200000dc

080007d4 <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	if (light_time1 >= 10) {
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <update_buffer+0xac>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b09      	cmp	r3, #9
 80007de:	dd1b      	ble.n	8000818 <update_buffer+0x44>
		led_buffer[0] = light_time1 / 10;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <update_buffer+0xac>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <update_buffer+0xb0>)
 80007e6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ea:	1092      	asrs	r2, r2, #2
 80007ec:	17db      	asrs	r3, r3, #31
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <update_buffer+0xb4>)
 80007f4:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1 % 10;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <update_buffer+0xac>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <update_buffer+0xb0>)
 80007fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000800:	1099      	asrs	r1, r3, #2
 8000802:	17d3      	asrs	r3, r2, #31
 8000804:	1ac9      	subs	r1, r1, r3
 8000806:	460b      	mov	r3, r1
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	440b      	add	r3, r1
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	1ad1      	subs	r1, r2, r3
 8000810:	b2ca      	uxtb	r2, r1
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <update_buffer+0xb4>)
 8000814:	705a      	strb	r2, [r3, #1]
 8000816:	e007      	b.n	8000828 <update_buffer+0x54>
	} else {
		led_buffer[0] = 0;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <update_buffer+0xb4>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <update_buffer+0xac>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <update_buffer+0xb4>)
 8000826:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <update_buffer+0xb8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b09      	cmp	r3, #9
 800082e:	dd1b      	ble.n	8000868 <update_buffer+0x94>
		led_buffer[2] = light_time / 10;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <update_buffer+0xb8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <update_buffer+0xb0>)
 8000836:	fb82 1203 	smull	r1, r2, r2, r3
 800083a:	1092      	asrs	r2, r2, #2
 800083c:	17db      	asrs	r3, r3, #31
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <update_buffer+0xb4>)
 8000844:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <update_buffer+0xb8>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <update_buffer+0xb0>)
 800084c:	fb83 1302 	smull	r1, r3, r3, r2
 8000850:	1099      	asrs	r1, r3, #2
 8000852:	17d3      	asrs	r3, r2, #31
 8000854:	1ac9      	subs	r1, r1, r3
 8000856:	460b      	mov	r3, r1
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	1ad1      	subs	r1, r2, r3
 8000860:	b2ca      	uxtb	r2, r1
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <update_buffer+0xb4>)
 8000864:	70da      	strb	r2, [r3, #3]
	} else {
		led_buffer[2] = 0;
		led_buffer[3] = light_time;
	}
}
 8000866:	e007      	b.n	8000878 <update_buffer+0xa4>
		led_buffer[2] = 0;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <update_buffer+0xb4>)
 800086a:	2200      	movs	r2, #0
 800086c:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <update_buffer+0xb8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <update_buffer+0xb4>)
 8000876:	70da      	strb	r2, [r3, #3]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000010 	.word	0x20000010
 8000884:	66666667 	.word	0x66666667
 8000888:	20000110 	.word	0x20000110
 800088c:	2000000c 	.word	0x2000000c

08000890 <led_init>:

void led_init() {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0x3F00;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <led_init+0x14>)
 8000896:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800089a:	611a      	str	r2, [r3, #16]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <update7SEG>:

void led_clear() {
	HAL_GPIO_WritePin(GPIOA, D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin, 1);
}

void update7SEG(int index){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d872      	bhi.n	800099c <update7SEG+0xf4>
 80008b6:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <update7SEG+0x14>)
 80008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008bc:	080008cd 	.word	0x080008cd
 80008c0:	08000901 	.word	0x08000901
 80008c4:	08000935 	.word	0x08000935
 80008c8:	08000969 	.word	0x08000969
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 80008cc:	2201      	movs	r2, #1
 80008ce:	2110      	movs	r1, #16
 80008d0:	4835      	ldr	r0, [pc, #212]	; (80009a8 <update7SEG+0x100>)
 80008d2:	f001 f91e 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	4833      	ldr	r0, [pc, #204]	; (80009a8 <update7SEG+0x100>)
 80008dc:	f001 f919 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	; 0x40
 80008e4:	4830      	ldr	r0, [pc, #192]	; (80009a8 <update7SEG+0x100>)
 80008e6:	f001 f914 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80008ea:	2200      	movs	r2, #0
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	482e      	ldr	r0, [pc, #184]	; (80009a8 <update7SEG+0x100>)
 80008f0:	f001 f90f 	bl	8001b12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <update7SEG+0x104>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f859 	bl	80009b0 <display7SEG>
			break;
 80008fe:	e04e      	b.n	800099e <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000900:	2200      	movs	r2, #0
 8000902:	2110      	movs	r1, #16
 8000904:	4828      	ldr	r0, [pc, #160]	; (80009a8 <update7SEG+0x100>)
 8000906:	f001 f904 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 800090a:	2201      	movs	r2, #1
 800090c:	2120      	movs	r1, #32
 800090e:	4826      	ldr	r0, [pc, #152]	; (80009a8 <update7SEG+0x100>)
 8000910:	f001 f8ff 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	4823      	ldr	r0, [pc, #140]	; (80009a8 <update7SEG+0x100>)
 800091a:	f001 f8fa 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 800091e:	2200      	movs	r2, #0
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	4821      	ldr	r0, [pc, #132]	; (80009a8 <update7SEG+0x100>)
 8000924:	f001 f8f5 	bl	8001b12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <update7SEG+0x104>)
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f83f 	bl	80009b0 <display7SEG>
			break;
 8000932:	e034      	b.n	800099e <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	481b      	ldr	r0, [pc, #108]	; (80009a8 <update7SEG+0x100>)
 800093a:	f001 f8ea 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	4819      	ldr	r0, [pc, #100]	; (80009a8 <update7SEG+0x100>)
 8000944:	f001 f8e5 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 8000948:	2201      	movs	r2, #1
 800094a:	2140      	movs	r1, #64	; 0x40
 800094c:	4816      	ldr	r0, [pc, #88]	; (80009a8 <update7SEG+0x100>)
 800094e:	f001 f8e0 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000952:	2200      	movs	r2, #0
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	4814      	ldr	r0, [pc, #80]	; (80009a8 <update7SEG+0x100>)
 8000958:	f001 f8db 	bl	8001b12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <update7SEG+0x104>)
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f825 	bl	80009b0 <display7SEG>
			break;
 8000966:	e01a      	b.n	800099e <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000968:	2200      	movs	r2, #0
 800096a:	2110      	movs	r1, #16
 800096c:	480e      	ldr	r0, [pc, #56]	; (80009a8 <update7SEG+0x100>)
 800096e:	f001 f8d0 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <update7SEG+0x100>)
 8000978:	f001 f8cb 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 800097c:	2200      	movs	r2, #0
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <update7SEG+0x100>)
 8000982:	f001 f8c6 	bl	8001b12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 8000986:	2201      	movs	r2, #1
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <update7SEG+0x100>)
 800098c:	f001 f8c1 	bl	8001b12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <update7SEG+0x104>)
 8000992:	78db      	ldrb	r3, [r3, #3]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f80b 	bl	80009b0 <display7SEG>
			break;
 800099a:	e000      	b.n	800099e <update7SEG+0xf6>
		default:
			break;
 800099c:	bf00      	nop
	}
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010800 	.word	0x40010800
 80009ac:	20000110 	.word	0x20000110

080009b0 <display7SEG>:
void display7SEG(int num) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <display7SEG+0x24>)
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <display7SEG+0x28>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <display7SEG+0x24>)
 80009c8:	611a      	str	r2, [r3, #16]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	20000034 	.word	0x20000034

080009dc <displayMode>:

void displayMode() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	update_buffer();
 80009e0:	f7ff fef8 	bl	80007d4 <update_buffer>
	if (index_led >= 4) index_led = 0;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <displayMode+0x2c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	dd02      	ble.n	80009f2 <displayMode+0x16>
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <displayMode+0x2c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <displayMode+0x2c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	4903      	ldr	r1, [pc, #12]	; (8000a08 <displayMode+0x2c>)
 80009fa:	600a      	str	r2, [r1, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff53 	bl	80008a8 <update7SEG>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000d4 	.word	0x200000d4

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fd7e 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f822 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f8a8 	bl	8000b6c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a1c:	f000 f85a 	bl	8000ad4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <main+0x48>)
 8000a22:	f001 fcdf 	bl	80023e4 <HAL_TIM_Base_Start_IT>
  GPIOA->BRR=0xFF;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <main+0x4c>)
 8000a28:	22ff      	movs	r2, #255	; 0xff
 8000a2a:	615a      	str	r2, [r3, #20]
  led_init();
 8000a2c:	f7ff ff30 	bl	8000890 <led_init>
  traffic_init();
 8000a30:	f000 fafe 	bl	8001030 <traffic_init>
  setTimer1(2);
 8000a34:	2002      	movs	r0, #2
 8000a36:	f000 f901 	bl	8000c3c <setTimer1>
  setTimer2(DURATION_1S);
 8000a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3e:	f000 f917 	bl	8000c70 <setTimer2>
  setTimer3(DURATION_1S);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f000 f92d 	bl	8000ca4 <setTimer3>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  traffic_light_processing();
 8000a4a:	f000 fce9 	bl	8001420 <traffic_light_processing>
	  fsm_for_input_processing();
 8000a4e:	f7ff fd51 	bl	80004f4 <fsm_for_input_processing>
	  traffic_light_processing();
 8000a52:	e7fa      	b.n	8000a4a <main+0x3e>
 8000a54:	20000148 	.word	0x20000148
 8000a58:	40010800 	.word	0x40010800

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b090      	sub	sp, #64	; 0x40
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	2228      	movs	r2, #40	; 0x28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 f878 	bl	8002b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a86:	2310      	movs	r3, #16
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f86e 	bl	8001b74 <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a9e:	f000 f8c7 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fada 	bl	8002074 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 f8b3 	bl	8000c30 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3740      	adds	r7, #64	; 0x40
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000afa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b08:	2209      	movs	r2, #9
 8000b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b1a:	f001 fc13 	bl	8002344 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b24:	f000 f884 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b36:	f001 fda9 	bl	800268c <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b40:	f000 f876 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b52:	f001 ff71 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f868 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000148 	.word	0x20000148

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_GPIO_Init+0xb8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0308 	and.w	r3, r3, #8
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	21f0      	movs	r1, #240	; 0xf0
 8000bb4:	481c      	ldr	r0, [pc, #112]	; (8000c28 <MX_GPIO_Init+0xbc>)
 8000bb6:	f000 ffac 	bl	8001b12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000bc0:	481a      	ldr	r0, [pc, #104]	; (8000c2c <MX_GPIO_Init+0xc0>)
 8000bc2:	f000 ffa6 	bl	8001b12 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000bc6:	23f0      	movs	r3, #240	; 0xf0
 8000bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <MX_GPIO_Init+0xbc>)
 8000bde:	f000 fe07 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin
                           D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 8000be2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000be6:	60bb      	str	r3, [r7, #8]
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_GPIO_Init+0xc0>)
 8000bfc:	f000 fdf8 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000c00:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4619      	mov	r1, r3
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_GPIO_Init+0xbc>)
 8000c16:	f000 fdeb 	bl	80017f0 <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <setTimer1+0x28>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4e:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <setTimer1+0x2c>)
 8000c50:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <setTimer1+0x30>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000040 	.word	0x20000040
 8000c68:	20000128 	.word	0x20000128
 8000c6c:	20000114 	.word	0x20000114

08000c70 <setTimer2>:
void setTimer2(int duration) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <setTimer2+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <setTimer2+0x2c>)
 8000c84:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <setTimer2+0x30>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000040 	.word	0x20000040
 8000c9c:	2000012c 	.word	0x2000012c
 8000ca0:	20000118 	.word	0x20000118

08000ca4 <setTimer3>:
void setTimer3(int duration) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <setTimer3+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <setTimer3+0x2c>)
 8000cb8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <setTimer3+0x30>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000040 	.word	0x20000040
 8000cd0:	20000130 	.word	0x20000130
 8000cd4:	2000011c 	.word	0x2000011c

08000cd8 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <timerRun+0xac>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	dd0b      	ble.n	8000cfc <timerRun+0x24>
		timer1_counter--;
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <timerRun+0xac>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <timerRun+0xac>)
 8000cec:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <timerRun+0xac>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	dc02      	bgt.n	8000cfc <timerRun+0x24>
			timer1_flag = 1;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <timerRun+0xb0>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <timerRun+0xb4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	dd0b      	ble.n	8000d1c <timerRun+0x44>
		timer2_counter--;
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <timerRun+0xb4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <timerRun+0xb4>)
 8000d0c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <timerRun+0xb4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dc02      	bgt.n	8000d1c <timerRun+0x44>
			timer2_flag = 1;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <timerRun+0xb8>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <timerRun+0xbc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	dd0b      	ble.n	8000d3c <timerRun+0x64>
		timer3_counter--;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <timerRun+0xbc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <timerRun+0xbc>)
 8000d2c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <timerRun+0xbc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	dc02      	bgt.n	8000d3c <timerRun+0x64>
			timer3_flag = 1;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <timerRun+0xc0>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <timerRun+0xc4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd0b      	ble.n	8000d5c <timerRun+0x84>
		timer4_counter--;
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <timerRun+0xc4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <timerRun+0xc4>)
 8000d4c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <timerRun+0xc4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	dc02      	bgt.n	8000d5c <timerRun+0x84>
			timer4_flag = 1;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <timerRun+0xc8>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <timerRun+0xcc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	dd0b      	ble.n	8000d7c <timerRun+0xa4>
		timer5_counter--;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <timerRun+0xcc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <timerRun+0xcc>)
 8000d6c:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <timerRun+0xcc>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	dc02      	bgt.n	8000d7c <timerRun+0xa4>
			timer5_flag = 1;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <timerRun+0xd0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	20000128 	.word	0x20000128
 8000d88:	20000114 	.word	0x20000114
 8000d8c:	2000012c 	.word	0x2000012c
 8000d90:	20000118 	.word	0x20000118
 8000d94:	20000130 	.word	0x20000130
 8000d98:	2000011c 	.word	0x2000011c
 8000d9c:	20000134 	.word	0x20000134
 8000da0:	20000120 	.word	0x20000120
 8000da4:	20000138 	.word	0x20000138
 8000da8:	20000124 	.word	0x20000124

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_MspInit+0x60>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_MspInit+0x60>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e20:	d113      	bne.n	8000e4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_TIM_Base_MspInit+0x44>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_TIM_Base_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_TIM_Base_MspInit+0x44>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	201c      	movs	r0, #28
 8000e40:	f000 fc9f 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e44:	201c      	movs	r0, #28
 8000e46:	f000 fcb8 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9e:	f000 fb7d 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM2_IRQHandler+0x10>)
 8000eae:	f001 fae5 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000148 	.word	0x20000148

08000ebc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00a      	b.n	8000ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <_read+0x12>
	}

return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e009      	b.n	8000f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf1      	blt.n	8000f08 <_write+0x12>
	}
	return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f54:	605a      	str	r2, [r3, #4]
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <_isatty>:

int _isatty(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	return 0;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f001 fda4 	bl	8002b0c <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20002800 	.word	0x20002800
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	2000013c 	.word	0x2000013c
 8000ff8:	200001a8 	.word	0x200001a8

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d103      	bne.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800101a:	f7ff fae7 	bl	80005ec <button_reading>
		displayMode();
 800101e:	f7ff fcdd 	bl	80009dc <displayMode>
	}
	timerRun();
 8001022:	f7ff fe59 	bl	8000cd8 <timerRun>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <traffic_init>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void traffic_init() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	light_time = man_green_time;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <traffic_init+0x34>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <traffic_init+0x38>)
 800103a:	6013      	str	r3, [r2, #0]
	light_time1 = man_red_time;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <traffic_init+0x3c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <traffic_init+0x40>)
 8001042:	6013      	str	r3, [r2, #0]
	led_init();
 8001044:	f7ff fc24 	bl	8000890 <led_init>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <traffic_init+0x44>)
 8001050:	f000 fd5f 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <traffic_init+0x44>)
 800105c:	f000 fd59 	bl	8001b12 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000000 	.word	0x20000000
 8001070:	20000010 	.word	0x20000010
 8001074:	40010c00 	.word	0x40010c00

08001078 <updateTempTime>:

void updateTempTime() {
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
	switch(status) {
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <updateTempTime+0x94>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	2b06      	cmp	r3, #6
 8001084:	d83a      	bhi.n	80010fc <updateTempTime+0x84>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <updateTempTime+0x14>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	080010fd 	.word	0x080010fd
 8001090:	080010fd 	.word	0x080010fd
 8001094:	080010fd 	.word	0x080010fd
 8001098:	080010fd 	.word	0x080010fd
 800109c:	080010a9 	.word	0x080010a9
 80010a0:	080010c5 	.word	0x080010c5
 80010a4:	080010e1 	.word	0x080010e1
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			//light_time = man_red_time;
			if (temp_value >= 99) temp_value = 0;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <updateTempTime+0x98>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b62      	cmp	r3, #98	; 0x62
 80010ae:	dd03      	ble.n	80010b8 <updateTempTime+0x40>
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <updateTempTime+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 80010b6:	e021      	b.n	80010fc <updateTempTime+0x84>
			else temp_value++;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <updateTempTime+0x98>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <updateTempTime+0x98>)
 80010c0:	6013      	str	r3, [r2, #0]
			break;
 80010c2:	e01b      	b.n	80010fc <updateTempTime+0x84>
		case MAN_AMBER_MODE:
			//temp_value = temp_value;
			if (temp_value >= 99) temp_value = 0;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <updateTempTime+0x98>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b62      	cmp	r3, #98	; 0x62
 80010ca:	dd03      	ble.n	80010d4 <updateTempTime+0x5c>
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <updateTempTime+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 80010d2:	e013      	b.n	80010fc <updateTempTime+0x84>
			else temp_value++;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <updateTempTime+0x98>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <updateTempTime+0x98>)
 80010dc:	6013      	str	r3, [r2, #0]
			break;
 80010de:	e00d      	b.n	80010fc <updateTempTime+0x84>
		case MAN_GREEN_MODE:
			//light_time = man_green_time;
			if (temp_value >= 99) temp_value = 0;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <updateTempTime+0x98>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b62      	cmp	r3, #98	; 0x62
 80010e6:	dd03      	ble.n	80010f0 <updateTempTime+0x78>
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <updateTempTime+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 80010ee:	e004      	b.n	80010fa <updateTempTime+0x82>
			else temp_value++;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <updateTempTime+0x98>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <updateTempTime+0x98>)
 80010f8:	6013      	str	r3, [r2, #0]
			break;
 80010fa:	bf00      	nop
	}
	light_time = temp_value;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <updateTempTime+0x98>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <updateTempTime+0x9c>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20000014 	.word	0x20000014
 8001110:	200000d0 	.word	0x200000d0
 8001114:	2000000c 	.word	0x2000000c

08001118 <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	printf("Confirmed adjust time!\r\n");
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <confirmAdjustedTime+0x74>)
 800111e:	f001 fd95 	bl	8002c4c <puts>
	switch(status) {
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <confirmAdjustedTime+0x78>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3b01      	subs	r3, #1
 8001128:	2b06      	cmp	r3, #6
 800112a:	d82c      	bhi.n	8001186 <confirmAdjustedTime+0x6e>
 800112c:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <confirmAdjustedTime+0x1c>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001187 	.word	0x08001187
 8001138:	08001187 	.word	0x08001187
 800113c:	08001187 	.word	0x08001187
 8001140:	08001187 	.word	0x08001187
 8001144:	08001151 	.word	0x08001151
 8001148:	08001163 	.word	0x08001163
 800114c:	08001175 	.word	0x08001175
		case NORMAL_MODE:
			//temp_value = light_time;
			break;
		case MAN_RED_MODE:
			man_red_time = temp_value;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <confirmAdjustedTime+0x7c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <confirmAdjustedTime+0x80>)
 8001156:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <confirmAdjustedTime+0x80>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <confirmAdjustedTime+0x84>)
 800115e:	6013      	str	r3, [r2, #0]
			break;
 8001160:	e012      	b.n	8001188 <confirmAdjustedTime+0x70>
		case MAN_AMBER_MODE:
			man_amber_time = temp_value;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <confirmAdjustedTime+0x7c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <confirmAdjustedTime+0x88>)
 8001168:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <confirmAdjustedTime+0x88>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <confirmAdjustedTime+0x84>)
 8001170:	6013      	str	r3, [r2, #0]
			break;
 8001172:	e009      	b.n	8001188 <confirmAdjustedTime+0x70>
		case MAN_GREEN_MODE:
			man_green_time = temp_value;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <confirmAdjustedTime+0x7c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <confirmAdjustedTime+0x8c>)
 800117a:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <confirmAdjustedTime+0x8c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <confirmAdjustedTime+0x84>)
 8001182:	6013      	str	r3, [r2, #0]
			break;
 8001184:	e000      	b.n	8001188 <confirmAdjustedTime+0x70>
		default:
			break;
 8001186:	bf00      	nop
	}
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	080035b4 	.word	0x080035b4
 8001190:	20000014 	.word	0x20000014
 8001194:	200000d0 	.word	0x200000d0
 8001198:	20000000 	.word	0x20000000
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	20000004 	.word	0x20000004
 80011a4:	20000008 	.word	0x20000008

080011a8 <resetToTheDefaultSetting>:

void resetToTheDefaultSetting() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	// default settings
	printf("All settings have been reset!\r\n");
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <resetToTheDefaultSetting+0x44>)
 80011ae:	f001 fd4d 	bl	8002c4c <puts>
	printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 80011b2:	480f      	ldr	r0, [pc, #60]	; (80011f0 <resetToTheDefaultSetting+0x48>)
 80011b4:	f001 fd4a 	bl	8002c4c <puts>
	man_red_time = RED_TIME / 100;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <resetToTheDefaultSetting+0x4c>)
 80011ba:	2205      	movs	r2, #5
 80011bc:	601a      	str	r2, [r3, #0]
	man_amber_time = YELLOW_TIME / 100;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <resetToTheDefaultSetting+0x50>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	601a      	str	r2, [r3, #0]
	man_green_time = GREEN_TIME / 100;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <resetToTheDefaultSetting+0x54>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	601a      	str	r2, [r3, #0]
	status = NORMAL_MODE;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <resetToTheDefaultSetting+0x58>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
	led_status = RED_GREEN;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <resetToTheDefaultSetting+0x5c>)
 80011d2:	2214      	movs	r2, #20
 80011d4:	601a      	str	r2, [r3, #0]
	index_led = 0;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <resetToTheDefaultSetting+0x60>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
	temp_value = 0;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <resetToTheDefaultSetting+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
	// re-initialize traffic light with default settings
	traffic_init();
 80011e2:	f7ff ff25 	bl	8001030 <traffic_init>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	080035cc 	.word	0x080035cc
 80011f0:	080035ec 	.word	0x080035ec
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000014 	.word	0x20000014
 8001204:	20000018 	.word	0x20000018
 8001208:	200000d4 	.word	0x200000d4
 800120c:	200000d0 	.word	0x200000d0

08001210 <normal_running_traffic_light>:

void normal_running_traffic_light() {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	switch(led_status) {
 8001214:	4b7a      	ldr	r3, [pc, #488]	; (8001400 <normal_running_traffic_light+0x1f0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b14      	subs	r3, #20
 800121a:	2b03      	cmp	r3, #3
 800121c:	f200 80e4 	bhi.w	80013e8 <normal_running_traffic_light+0x1d8>
 8001220:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <normal_running_traffic_light+0x18>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	08001239 	.word	0x08001239
 800122c:	080012b7 	.word	0x080012b7
 8001230:	08001321 	.word	0x08001321
 8001234:	08001381 	.word	0x08001381
		case RED_GREEN:
			if (timer3_flag == 1) {
 8001238:	4b72      	ldr	r3, [pc, #456]	; (8001404 <normal_running_traffic_light+0x1f4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	f040 80d5 	bne.w	80013ec <normal_running_traffic_light+0x1dc>
				led_init();
 8001242:	f7ff fb25 	bl	8000890 <led_init>
				HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124c:	486e      	ldr	r0, [pc, #440]	; (8001408 <normal_running_traffic_light+0x1f8>)
 800124e:	f000 fc60 	bl	8001b12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001258:	486b      	ldr	r0, [pc, #428]	; (8001408 <normal_running_traffic_light+0x1f8>)
 800125a:	f000 fc5a 	bl	8001b12 <HAL_GPIO_WritePin>

				light_time--;
 800125e:	4b6b      	ldr	r3, [pc, #428]	; (800140c <normal_running_traffic_light+0x1fc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	4a69      	ldr	r2, [pc, #420]	; (800140c <normal_running_traffic_light+0x1fc>)
 8001266:	6013      	str	r3, [r2, #0]
				light_time1--;
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <normal_running_traffic_light+0x200>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a68      	ldr	r2, [pc, #416]	; (8001410 <normal_running_traffic_light+0x200>)
 8001270:	6013      	str	r3, [r2, #0]
				if (light_time == 0 || light_time1 == 0) {
 8001272:	4b66      	ldr	r3, [pc, #408]	; (800140c <normal_running_traffic_light+0x1fc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <normal_running_traffic_light+0x72>
 800127a:	4b65      	ldr	r3, [pc, #404]	; (8001410 <normal_running_traffic_light+0x200>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d114      	bne.n	80012ac <normal_running_traffic_light+0x9c>
					led_status = RED_AMBER;
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <normal_running_traffic_light+0x1f0>)
 8001284:	2215      	movs	r2, #21
 8001286:	601a      	str	r2, [r3, #0]
					light_time = man_amber_time; // Road 2
 8001288:	4b62      	ldr	r3, [pc, #392]	; (8001414 <normal_running_traffic_light+0x204>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a5f      	ldr	r2, [pc, #380]	; (800140c <normal_running_traffic_light+0x1fc>)
 800128e:	6013      	str	r3, [r2, #0]
					led_init();
 8001290:	f7ff fafe 	bl	8000890 <led_init>
					//light_time1 = man_red_time; // Road 1
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129a:	485b      	ldr	r0, [pc, #364]	; (8001408 <normal_running_traffic_light+0x1f8>)
 800129c:	f000 fc39 	bl	8001b12 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D5_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a6:	4858      	ldr	r0, [pc, #352]	; (8001408 <normal_running_traffic_light+0x1f8>)
 80012a8:	f000 fc33 	bl	8001b12 <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	f7ff fcf8 	bl	8000ca4 <setTimer3>
			}
			break;
 80012b4:	e09a      	b.n	80013ec <normal_running_traffic_light+0x1dc>
		case RED_AMBER:
				if (timer3_flag == 1) {
 80012b6:	4b53      	ldr	r3, [pc, #332]	; (8001404 <normal_running_traffic_light+0x1f4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	f040 8098 	bne.w	80013f0 <normal_running_traffic_light+0x1e0>
					light_time--;
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <normal_running_traffic_light+0x1fc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4a51      	ldr	r2, [pc, #324]	; (800140c <normal_running_traffic_light+0x1fc>)
 80012c8:	6013      	str	r3, [r2, #0]
					light_time1--;
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <normal_running_traffic_light+0x200>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <normal_running_traffic_light+0x200>)
 80012d2:	6013      	str	r3, [r2, #0]
					if (!light_time || !light_time1) {
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <normal_running_traffic_light+0x1fc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <normal_running_traffic_light+0xd4>
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <normal_running_traffic_light+0x200>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d118      	bne.n	8001316 <normal_running_traffic_light+0x106>
						led_status = GREEN_RED;
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <normal_running_traffic_light+0x1f0>)
 80012e6:	2216      	movs	r2, #22
 80012e8:	601a      	str	r2, [r3, #0]
						light_time = man_red_time; // Road 2
 80012ea:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <normal_running_traffic_light+0x208>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a47      	ldr	r2, [pc, #284]	; (800140c <normal_running_traffic_light+0x1fc>)
 80012f0:	6013      	str	r3, [r2, #0]
						light_time1 = man_green_time; // Road 1
 80012f2:	4b4a      	ldr	r3, [pc, #296]	; (800141c <normal_running_traffic_light+0x20c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a46      	ldr	r2, [pc, #280]	; (8001410 <normal_running_traffic_light+0x200>)
 80012f8:	6013      	str	r3, [r2, #0]

						led_init();
 80012fa:	f7ff fac9 	bl	8000890 <led_init>
						HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 1, turn on the RED light. 
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001304:	4840      	ldr	r0, [pc, #256]	; (8001408 <normal_running_traffic_light+0x1f8>)
 8001306:	f000 fc04 	bl	8001b12 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001310:	483d      	ldr	r0, [pc, #244]	; (8001408 <normal_running_traffic_light+0x1f8>)
 8001312:	f000 fbfe 	bl	8001b12 <HAL_GPIO_WritePin>
					}
					setTimer3(DURATION_1S);
 8001316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131a:	f7ff fcc3 	bl	8000ca4 <setTimer3>
				}

			break;
 800131e:	e067      	b.n	80013f0 <normal_running_traffic_light+0x1e0>
		case GREEN_RED:
			if (timer3_flag == 1) {
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <normal_running_traffic_light+0x1f4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d165      	bne.n	80013f4 <normal_running_traffic_light+0x1e4>

				light_time--;
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <normal_running_traffic_light+0x1fc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	4a37      	ldr	r2, [pc, #220]	; (800140c <normal_running_traffic_light+0x1fc>)
 8001330:	6013      	str	r3, [r2, #0]
				light_time1--;
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <normal_running_traffic_light+0x200>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3b01      	subs	r3, #1
 8001338:	4a35      	ldr	r2, [pc, #212]	; (8001410 <normal_running_traffic_light+0x200>)
 800133a:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <normal_running_traffic_light+0x1fc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <normal_running_traffic_light+0x13c>
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <normal_running_traffic_light+0x200>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d114      	bne.n	8001376 <normal_running_traffic_light+0x166>
					led_status = AMBER_RED;
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <normal_running_traffic_light+0x1f0>)
 800134e:	2217      	movs	r2, #23
 8001350:	601a      	str	r2, [r3, #0]
					light_time1 = man_amber_time; // Road 1
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <normal_running_traffic_light+0x204>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <normal_running_traffic_light+0x200>)
 8001358:	6013      	str	r3, [r2, #0]
					led_init();
 800135a:	f7ff fa99 	bl	8000890 <led_init>
					HAL_GPIO_WritePin(GPIOB, D2_Pin, 0); // On ROAD 1, turn on the RED light. 
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001364:	4828      	ldr	r0, [pc, #160]	; (8001408 <normal_running_traffic_light+0x1f8>)
 8001366:	f000 fbd4 	bl	8001b12 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001370:	4825      	ldr	r0, [pc, #148]	; (8001408 <normal_running_traffic_light+0x1f8>)
 8001372:	f000 fbce 	bl	8001b12 <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 8001376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137a:	f7ff fc93 	bl	8000ca4 <setTimer3>
			}

			break;
 800137e:	e039      	b.n	80013f4 <normal_running_traffic_light+0x1e4>
		case AMBER_RED:
			if (timer3_flag == 1) {
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <normal_running_traffic_light+0x1f4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d137      	bne.n	80013f8 <normal_running_traffic_light+0x1e8>
				light_time--;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <normal_running_traffic_light+0x1fc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <normal_running_traffic_light+0x1fc>)
 8001390:	6013      	str	r3, [r2, #0]
					light_time1--;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <normal_running_traffic_light+0x200>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3b01      	subs	r3, #1
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <normal_running_traffic_light+0x200>)
 800139a:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <normal_running_traffic_light+0x1fc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <normal_running_traffic_light+0x19c>
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <normal_running_traffic_light+0x200>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d118      	bne.n	80013de <normal_running_traffic_light+0x1ce>
					led_status = RED_GREEN;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <normal_running_traffic_light+0x1f0>)
 80013ae:	2214      	movs	r2, #20
 80013b0:	601a      	str	r2, [r3, #0]
					light_time = man_green_time; // Road 2
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <normal_running_traffic_light+0x20c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <normal_running_traffic_light+0x1fc>)
 80013b8:	6013      	str	r3, [r2, #0]
					light_time1 = man_red_time; // Road 1
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <normal_running_traffic_light+0x208>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <normal_running_traffic_light+0x200>)
 80013c0:	6013      	str	r3, [r2, #0]
					led_init();
 80013c2:	f7ff fa65 	bl	8000890 <led_init>
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013cc:	480e      	ldr	r0, [pc, #56]	; (8001408 <normal_running_traffic_light+0x1f8>)
 80013ce:	f000 fba0 	bl	8001b12 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <normal_running_traffic_light+0x1f8>)
 80013da:	f000 fb9a 	bl	8001b12 <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 80013de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e2:	f7ff fc5f 	bl	8000ca4 <setTimer3>
			}
			break;
 80013e6:	e007      	b.n	80013f8 <normal_running_traffic_light+0x1e8>
		default:
			break;
 80013e8:	bf00      	nop
 80013ea:	e006      	b.n	80013fa <normal_running_traffic_light+0x1ea>
			break;
 80013ec:	bf00      	nop
 80013ee:	e004      	b.n	80013fa <normal_running_traffic_light+0x1ea>
			break;
 80013f0:	bf00      	nop
 80013f2:	e002      	b.n	80013fa <normal_running_traffic_light+0x1ea>
			break;
 80013f4:	bf00      	nop
 80013f6:	e000      	b.n	80013fa <normal_running_traffic_light+0x1ea>
			break;
 80013f8:	bf00      	nop
	}
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000018 	.word	0x20000018
 8001404:	2000011c 	.word	0x2000011c
 8001408:	40010c00 	.word	0x40010c00
 800140c:	2000000c 	.word	0x2000000c
 8001410:	20000010 	.word	0x20000010
 8001414:	20000004 	.word	0x20000004
 8001418:	20000000 	.word	0x20000000
 800141c:	20000008 	.word	0x20000008

08001420 <traffic_light_processing>:

void traffic_light_processing() {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	switch(status) {
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <traffic_light_processing+0x98>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	2b06      	cmp	r3, #6
 800142c:	d842      	bhi.n	80014b4 <traffic_light_processing+0x94>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <traffic_light_processing+0x14>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	08001451 	.word	0x08001451
 8001438:	08001457 	.word	0x08001457
 800143c:	08001473 	.word	0x08001473
 8001440:	0800148f 	.word	0x0800148f
 8001444:	08001457 	.word	0x08001457
 8001448:	08001473 	.word	0x08001473
 800144c:	0800148f 	.word	0x0800148f
		case NORMAL_MODE:
			normal_running_traffic_light();
 8001450:	f7ff fede 	bl	8001210 <normal_running_traffic_light>
			break;
 8001454:	e02e      	b.n	80014b4 <traffic_light_processing+0x94>
		case RED_MODE: case MAN_RED_MODE:
			if (timer1_flag == 1) {
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <traffic_light_processing+0x9c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d125      	bne.n	80014aa <traffic_light_processing+0x8a>
				// Toggle RED
				HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 800145e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <traffic_light_processing+0xa0>)
 8001464:	f000 fb6d 	bl	8001b42 <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 8001468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146c:	f7ff fbe6 	bl	8000c3c <setTimer1>
			}
			break;
 8001470:	e01b      	b.n	80014aa <traffic_light_processing+0x8a>
		case AMBER_MODE: case MAN_AMBER_MODE:
			if (timer1_flag == 1) {
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <traffic_light_processing+0x9c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d119      	bne.n	80014ae <traffic_light_processing+0x8e>
				// Toggle AMBER
				HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 800147a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <traffic_light_processing+0xa0>)
 8001480:	f000 fb5f 	bl	8001b42 <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 8001484:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001488:	f7ff fbd8 	bl	8000c3c <setTimer1>
			}
			break;
 800148c:	e00f      	b.n	80014ae <traffic_light_processing+0x8e>
		case GREEN_MODE: case MAN_GREEN_MODE:
			if (timer1_flag == 1) {
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <traffic_light_processing+0x9c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d10d      	bne.n	80014b2 <traffic_light_processing+0x92>
				// Toggle GREEN
				HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 8001496:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <traffic_light_processing+0xa0>)
 800149c:	f000 fb51 	bl	8001b42 <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80014a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a4:	f7ff fbca 	bl	8000c3c <setTimer1>
			}
			break;
 80014a8:	e003      	b.n	80014b2 <traffic_light_processing+0x92>
			break;
 80014aa:	bf00      	nop
 80014ac:	e002      	b.n	80014b4 <traffic_light_processing+0x94>
			break;
 80014ae:	bf00      	nop
 80014b0:	e000      	b.n	80014b4 <traffic_light_processing+0x94>
			break;
 80014b2:	bf00      	nop
	}
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000014 	.word	0x20000014
 80014bc:	20000114 	.word	0x20000114
 80014c0:	40010c00 	.word	0x40010c00

080014c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c6:	490d      	ldr	r1, [pc, #52]	; (80014fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014dc:	4c0a      	ldr	r4, [pc, #40]	; (8001508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ea:	f7ff fd87 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f001 fb13 	bl	8002b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f2:	f7ff fa8b 	bl	8000a0c <main>
  bx lr
 80014f6:	4770      	bx	lr
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001500:	080036a4 	.word	0x080036a4
  ldr r2, =_sbss
 8001504:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001508:	200001a4 	.word	0x200001a4

0800150c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC1_2_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_Init+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_Init+0x28>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001520:	2003      	movs	r0, #3
 8001522:	f000 f923 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001526:	200f      	movs	r0, #15
 8001528:	f000 f808 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152c:	f7ff fc3e 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x54>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f93b 	bl	80017d6 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00e      	b.n	8001588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d80a      	bhi.n	8001586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 f903 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_InitTick+0x5c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000044 	.word	0x20000044
 8001594:	2000004c 	.word	0x2000004c
 8001598:	20000048 	.word	0x20000048

0800159c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x1c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_IncTick+0x20>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a03      	ldr	r2, [pc, #12]	; (80015bc <HAL_IncTick+0x20>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	2000004c 	.word	0x2000004c
 80015bc:	20000190 	.word	0x20000190

080015c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <HAL_GetTick+0x10>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000190 	.word	0x20000190

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4906      	ldr	r1, [pc, #24]	; (800166c <__NVIC_EnableIRQ+0x34>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff90 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff2d 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff42 	bl	800161c <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff35 	bl	8001638 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	e148      	b.n	8001a96 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001804:	2201      	movs	r2, #1
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8137 	bne.w	8001a90 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4aa3      	ldr	r2, [pc, #652]	; (8001ab4 <HAL_GPIO_Init+0x2c4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d05e      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800182c:	4aa1      	ldr	r2, [pc, #644]	; (8001ab4 <HAL_GPIO_Init+0x2c4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d875      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001832:	4aa1      	ldr	r2, [pc, #644]	; (8001ab8 <HAL_GPIO_Init+0x2c8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d058      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001838:	4a9f      	ldr	r2, [pc, #636]	; (8001ab8 <HAL_GPIO_Init+0x2c8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d86f      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800183e:	4a9f      	ldr	r2, [pc, #636]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d052      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001844:	4a9d      	ldr	r2, [pc, #628]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d869      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800184a:	4a9d      	ldr	r2, [pc, #628]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04c      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001850:	4a9b      	ldr	r2, [pc, #620]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d863      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001856:	4a9b      	ldr	r2, [pc, #620]	; (8001ac4 <HAL_GPIO_Init+0x2d4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d046      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800185c:	4a99      	ldr	r2, [pc, #612]	; (8001ac4 <HAL_GPIO_Init+0x2d4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d85d      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001862:	2b12      	cmp	r3, #18
 8001864:	d82a      	bhi.n	80018bc <HAL_GPIO_Init+0xcc>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d859      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_GPIO_Init+0x80>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018c5 	.word	0x080018c5
 8001878:	080018d7 	.word	0x080018d7
 800187c:	08001919 	.word	0x08001919
 8001880:	0800191f 	.word	0x0800191f
 8001884:	0800191f 	.word	0x0800191f
 8001888:	0800191f 	.word	0x0800191f
 800188c:	0800191f 	.word	0x0800191f
 8001890:	0800191f 	.word	0x0800191f
 8001894:	0800191f 	.word	0x0800191f
 8001898:	0800191f 	.word	0x0800191f
 800189c:	0800191f 	.word	0x0800191f
 80018a0:	0800191f 	.word	0x0800191f
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	0800191f 	.word	0x0800191f
 80018ac:	0800191f 	.word	0x0800191f
 80018b0:	0800191f 	.word	0x0800191f
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018e1 	.word	0x080018e1
 80018bc:	4a82      	ldr	r2, [pc, #520]	; (8001ac8 <HAL_GPIO_Init+0x2d8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c2:	e02c      	b.n	800191e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e029      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	3304      	adds	r3, #4
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e024      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	3308      	adds	r3, #8
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e01f      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	330c      	adds	r3, #12
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e01a      	b.n	8001920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f2:	2304      	movs	r3, #4
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e013      	b.n	8001920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	611a      	str	r2, [r3, #16]
          break;
 800190a:	e009      	b.n	8001920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	615a      	str	r2, [r3, #20]
          break;
 8001916:	e003      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x130>
          break;
 800191e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d801      	bhi.n	800192a <HAL_GPIO_Init+0x13a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	e001      	b.n	800192e <HAL_GPIO_Init+0x13e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d802      	bhi.n	800193c <HAL_GPIO_Init+0x14c>
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x152>
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3b08      	subs	r3, #8
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	210f      	movs	r1, #15
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	6a39      	ldr	r1, [r7, #32]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8090 	beq.w	8001a90 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_GPIO_Init+0x2dc>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a55      	ldr	r2, [pc, #340]	; (8001acc <HAL_GPIO_Init+0x2dc>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_GPIO_Init+0x2dc>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001988:	4a51      	ldr	r2, [pc, #324]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a49      	ldr	r2, [pc, #292]	; (8001ad4 <HAL_GPIO_Init+0x2e4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00d      	beq.n	80019d0 <HAL_GPIO_Init+0x1e0>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a48      	ldr	r2, [pc, #288]	; (8001ad8 <HAL_GPIO_Init+0x2e8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d007      	beq.n	80019cc <HAL_GPIO_Init+0x1dc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a47      	ldr	r2, [pc, #284]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_GPIO_Init+0x1d8>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019c8:	2303      	movs	r3, #3
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019d0:	2300      	movs	r3, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e2:	493b      	ldr	r1, [pc, #236]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4937      	ldr	r1, [pc, #220]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a0a:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4933      	ldr	r1, [pc, #204]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a24:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	492d      	ldr	r1, [pc, #180]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4929      	ldr	r1, [pc, #164]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4923      	ldr	r1, [pc, #140]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	491f      	ldr	r1, [pc, #124]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4919      	ldr	r1, [pc, #100]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4915      	ldr	r1, [pc, #84]	; (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	3301      	adds	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f aeaf 	bne.w	8001804 <HAL_GPIO_Init+0x14>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	372c      	adds	r7, #44	; 0x2c
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	10320000 	.word	0x10320000
 8001ab8:	10310000 	.word	0x10310000
 8001abc:	10220000 	.word	0x10220000
 8001ac0:	10210000 	.word	0x10210000
 8001ac4:	10120000 	.word	0x10120000
 8001ac8:	10110000 	.word	0x10110000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e001      	b.n	8001b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	807b      	strh	r3, [r7, #2]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b22:	787b      	ldrb	r3, [r7, #1]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b2e:	e003      	b.n	8001b38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	611a      	str	r2, [r3, #16]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b54:	887a      	ldrh	r2, [r7, #2]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	400b      	ands	r3, r1
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e26c      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8087 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d00c      	beq.n	8001bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba0:	4b8f      	ldr	r3, [pc, #572]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
 8001bac:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d168      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e246      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x76>
 8001bdc:	4b80      	ldr	r3, [pc, #512]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b78      	ldr	r3, [pc, #480]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0xbc>
 8001c16:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c30:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a67      	ldr	r2, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fcb6 	bl	80015c0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fcb2 	bl	80015c0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1fa      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe4>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fca2 	bl	80015c0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fc9e 	bl	80015c0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1e6      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x10c>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
 8001cc6:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1ba      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4939      	ldr	r1, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fc57 	bl	80015c0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fc53 	bl	80015c0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e19b      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4927      	ldr	r1, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fc36 	bl	80015c0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc32 	bl	80015c0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e17a      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03a      	beq.n	8001df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fc16 	bl	80015c0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc12 	bl	80015c0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e15a      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 faa6 	bl	8002308 <RCC_Delay>
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fbfc 	bl	80015c0 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fbf8 	bl	80015c0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e140      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	42420000 	.word	0x42420000
 8001de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b9e      	ldr	r3, [pc, #632]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e9      	bne.n	8001dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a6 	beq.w	8001f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b97      	ldr	r3, [pc, #604]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a93      	ldr	r2, [pc, #588]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a8a      	ldr	r2, [pc, #552]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fbb9 	bl	80015c0 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fbb5 	bl	80015c0 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0fd      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b81      	ldr	r3, [pc, #516]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x312>
 8001e78:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a72      	ldr	r2, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x356>
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a6c      	ldr	r2, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a66      	ldr	r2, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb69 	bl	80015c0 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff fb65 	bl	80015c0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0ab      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ee      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
 8001f14:	e014      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fb53 	bl	80015c0 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fb4f 	bl	80015c0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e095      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b48      	ldr	r3, [pc, #288]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a47      	ldr	r2, [pc, #284]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8081 	beq.w	800205e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d061      	beq.n	800202c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d146      	bne.n	8001ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fb23 	bl	80015c0 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff fb1f 	bl	80015c0 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e067      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	492d      	ldr	r1, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a19      	ldr	r1, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff faf3 	bl	80015c0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff faef 	bl	80015c0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e037      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x46a>
 8001ffc:	e02f      	b.n	800205e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fadc 	bl	80015c0 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff fad8 	bl	80015c0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e020      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x498>
 800202a:	e018      	b.n	800205e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e013      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	42420060 	.word	0x42420060

08002074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0d0      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d910      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4965      	ldr	r1, [pc, #404]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	494d      	ldr	r1, [pc, #308]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d040      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e073      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b39      	ldr	r3, [pc, #228]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4936      	ldr	r1, [pc, #216]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff fa2c 	bl	80015c0 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff fa28 	bl	80015c0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e053      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d210      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0207 	bic.w	r2, r3, #7
 80021aa:	4922      	ldr	r1, [pc, #136]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4916      	ldr	r1, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002202:	f000 f821 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002206:	4602      	mov	r2, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	490a      	ldr	r1, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	5ccb      	ldrb	r3, [r1, r3]
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1cc>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f98a 	bl	800153c <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40022000 	.word	0x40022000
 8002238:	40021000 	.word	0x40021000
 800223c:	08003628 	.word	0x08003628
 8002240:	20000044 	.word	0x20000044
 8002244:	20000048 	.word	0x20000048

08002248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	b490      	push	{r4, r7}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002250:	1d3c      	adds	r4, r7, #4
 8002252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002258:	f240 2301 	movw	r3, #513	; 0x201
 800225c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x40>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x46>
 8002286:	e02d      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228a:	623b      	str	r3, [r7, #32]
      break;
 800228c:	e02d      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	0c9b      	lsrs	r3, r3, #18
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800229a:	4413      	add	r3, r2
 800229c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0c5b      	lsrs	r3, r3, #17
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ba:	4413      	add	r3, r2
 80022bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c6:	fb02 f203 	mul.w	r2, r2, r3
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	e004      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	623b      	str	r3, [r7, #32]
      break;
 80022e2:	e002      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc90      	pop	{r4, r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	08003618 	.word	0x08003618
 80022fc:	40021000 	.word	0x40021000
 8002300:	007a1200 	.word	0x007a1200
 8002304:	003d0900 	.word	0x003d0900

08002308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <RCC_Delay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <RCC_Delay+0x38>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002324:	bf00      	nop
  }
  while (Delay --);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <RCC_Delay+0x1c>
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000044 	.word	0x20000044
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e041      	b.n	80023da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fd50 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f000 fa6a 	bl	800285c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d001      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e035      	b.n	8002468 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_TIM_Base_Start_IT+0x90>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_TIM_Base_Start_IT+0x4e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002426:	d004      	beq.n	8002432 <HAL_TIM_Base_Start_IT+0x4e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a12      	ldr	r2, [pc, #72]	; (8002478 <HAL_TIM_Base_Start_IT+0x94>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d111      	bne.n	8002456 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d010      	beq.n	8002466 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002454:	e007      	b.n	8002466 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40000400 	.word	0x40000400

0800247c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0202 	mvn.w	r2, #2
 80024a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f9b1 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f9a4 	bl	8002814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f9b3 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0204 	mvn.w	r2, #4
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f987 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f97a 	bl	8002814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f989 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b08      	cmp	r3, #8
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b08      	cmp	r3, #8
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0208 	mvn.w	r2, #8
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f95d 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f950 	bl	8002814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f95f 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b10      	cmp	r3, #16
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b10      	cmp	r3, #16
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0210 	mvn.w	r2, #16
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2208      	movs	r2, #8
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f933 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f926 	bl	8002814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f935 	bl	8002838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0201 	mvn.w	r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fd04 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fa67 	bl	8002afa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8f9 	bl	800284a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b20      	cmp	r3, #32
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0220 	mvn.w	r2, #32
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa32 	bl	8002ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_TIM_ConfigClockSource+0x18>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e0b3      	b.n	800280c <HAL_TIM_ConfigClockSource+0x180>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026dc:	d03e      	beq.n	800275c <HAL_TIM_ConfigClockSource+0xd0>
 80026de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e2:	f200 8087 	bhi.w	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 80026e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ea:	f000 8085 	beq.w	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 80026ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f2:	d87f      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 80026f4:	2b70      	cmp	r3, #112	; 0x70
 80026f6:	d01a      	beq.n	800272e <HAL_TIM_ConfigClockSource+0xa2>
 80026f8:	2b70      	cmp	r3, #112	; 0x70
 80026fa:	d87b      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 80026fc:	2b60      	cmp	r3, #96	; 0x60
 80026fe:	d050      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x116>
 8002700:	2b60      	cmp	r3, #96	; 0x60
 8002702:	d877      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 8002704:	2b50      	cmp	r3, #80	; 0x50
 8002706:	d03c      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xf6>
 8002708:	2b50      	cmp	r3, #80	; 0x50
 800270a:	d873      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d058      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x136>
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d86f      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 8002714:	2b30      	cmp	r3, #48	; 0x30
 8002716:	d064      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x156>
 8002718:	2b30      	cmp	r3, #48	; 0x30
 800271a:	d86b      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 800271c:	2b20      	cmp	r3, #32
 800271e:	d060      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x156>
 8002720:	2b20      	cmp	r3, #32
 8002722:	d867      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d05c      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x156>
 8002728:	2b10      	cmp	r3, #16
 800272a:	d05a      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800272c:	e062      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f000 f95c 	bl	80029fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002750:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	609a      	str	r2, [r3, #8]
      break;
 800275a:	e04e      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f000 f945 	bl	80029fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800277e:	609a      	str	r2, [r3, #8]
      break;
 8002780:	e03b      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	461a      	mov	r2, r3
 8002790:	f000 f8bc 	bl	800290c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2150      	movs	r1, #80	; 0x50
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f913 	bl	80029c6 <TIM_ITRx_SetConfig>
      break;
 80027a0:	e02b      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f000 f8da 	bl	8002968 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2160      	movs	r1, #96	; 0x60
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f903 	bl	80029c6 <TIM_ITRx_SetConfig>
      break;
 80027c0:	e01b      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f89c 	bl	800290c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2140      	movs	r1, #64	; 0x40
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f8f3 	bl	80029c6 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e00b      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f000 f8ea 	bl	80029c6 <TIM_ITRx_SetConfig>
        break;
 80027f2:	e002      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027f4:	bf00      	nop
 80027f6:	e000      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a25      	ldr	r2, [pc, #148]	; (8002904 <TIM_Base_SetConfig+0xa8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <TIM_Base_SetConfig+0x28>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287a:	d003      	beq.n	8002884 <TIM_Base_SetConfig+0x28>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <TIM_Base_SetConfig+0xac>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d108      	bne.n	8002896 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <TIM_Base_SetConfig+0xa8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <TIM_Base_SetConfig+0x52>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d003      	beq.n	80028ae <TIM_Base_SetConfig+0x52>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a17      	ldr	r2, [pc, #92]	; (8002908 <TIM_Base_SetConfig+0xac>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d108      	bne.n	80028c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <TIM_Base_SetConfig+0xa8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d103      	bne.n	80028f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	615a      	str	r2, [r3, #20]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400

0800290c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f023 0201 	bic.w	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f023 030a 	bic.w	r3, r3, #10
 8002948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f023 0210 	bic.w	r2, r3, #16
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002992:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	031b      	lsls	r3, r3, #12
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	621a      	str	r2, [r3, #32]
}
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f043 0307 	orr.w	r3, r3, #7
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b087      	sub	sp, #28
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	021a      	lsls	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	609a      	str	r2, [r3, #8]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e041      	b.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400

08002ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <__errno>:
 8002b0c:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <__errno+0x8>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000050 	.word	0x20000050

08002b18 <__libc_init_array>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	4d0c      	ldr	r5, [pc, #48]	; (8002b50 <__libc_init_array+0x38>)
 8002b1e:	4c0d      	ldr	r4, [pc, #52]	; (8002b54 <__libc_init_array+0x3c>)
 8002b20:	1b64      	subs	r4, r4, r5
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	42a6      	cmp	r6, r4
 8002b26:	d109      	bne.n	8002b3c <__libc_init_array+0x24>
 8002b28:	f000 fce4 	bl	80034f4 <_init>
 8002b2c:	2600      	movs	r6, #0
 8002b2e:	4d0a      	ldr	r5, [pc, #40]	; (8002b58 <__libc_init_array+0x40>)
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <__libc_init_array+0x44>)
 8002b32:	1b64      	subs	r4, r4, r5
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	42a6      	cmp	r6, r4
 8002b38:	d105      	bne.n	8002b46 <__libc_init_array+0x2e>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b40:	4798      	blx	r3
 8002b42:	3601      	adds	r6, #1
 8002b44:	e7ee      	b.n	8002b24 <__libc_init_array+0xc>
 8002b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4a:	4798      	blx	r3
 8002b4c:	3601      	adds	r6, #1
 8002b4e:	e7f2      	b.n	8002b36 <__libc_init_array+0x1e>
 8002b50:	0800369c 	.word	0x0800369c
 8002b54:	0800369c 	.word	0x0800369c
 8002b58:	0800369c 	.word	0x0800369c
 8002b5c:	080036a0 	.word	0x080036a0

08002b60 <memset>:
 8002b60:	4603      	mov	r3, r0
 8002b62:	4402      	add	r2, r0
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d100      	bne.n	8002b6a <memset+0xa>
 8002b68:	4770      	bx	lr
 8002b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6e:	e7f9      	b.n	8002b64 <memset+0x4>

08002b70 <_puts_r>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	460e      	mov	r6, r1
 8002b74:	4605      	mov	r5, r0
 8002b76:	b118      	cbz	r0, 8002b80 <_puts_r+0x10>
 8002b78:	6983      	ldr	r3, [r0, #24]
 8002b7a:	b90b      	cbnz	r3, 8002b80 <_puts_r+0x10>
 8002b7c:	f000 fa48 	bl	8003010 <__sinit>
 8002b80:	69ab      	ldr	r3, [r5, #24]
 8002b82:	68ac      	ldr	r4, [r5, #8]
 8002b84:	b913      	cbnz	r3, 8002b8c <_puts_r+0x1c>
 8002b86:	4628      	mov	r0, r5
 8002b88:	f000 fa42 	bl	8003010 <__sinit>
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <_puts_r+0xd0>)
 8002b8e:	429c      	cmp	r4, r3
 8002b90:	d120      	bne.n	8002bd4 <_puts_r+0x64>
 8002b92:	686c      	ldr	r4, [r5, #4]
 8002b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b96:	07db      	lsls	r3, r3, #31
 8002b98:	d405      	bmi.n	8002ba6 <_puts_r+0x36>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	0598      	lsls	r0, r3, #22
 8002b9e:	d402      	bmi.n	8002ba6 <_puts_r+0x36>
 8002ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ba2:	f000 fad3 	bl	800314c <__retarget_lock_acquire_recursive>
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	0719      	lsls	r1, r3, #28
 8002baa:	d51d      	bpl.n	8002be8 <_puts_r+0x78>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	b1db      	cbz	r3, 8002be8 <_puts_r+0x78>
 8002bb0:	3e01      	subs	r6, #1
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60a3      	str	r3, [r4, #8]
 8002bbc:	bb39      	cbnz	r1, 8002c0e <_puts_r+0x9e>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	da38      	bge.n	8002c34 <_puts_r+0xc4>
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	210a      	movs	r1, #10
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f000 f848 	bl	8002c5c <__swbuf_r>
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d011      	beq.n	8002bf4 <_puts_r+0x84>
 8002bd0:	250a      	movs	r5, #10
 8002bd2:	e011      	b.n	8002bf8 <_puts_r+0x88>
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <_puts_r+0xd4>)
 8002bd6:	429c      	cmp	r4, r3
 8002bd8:	d101      	bne.n	8002bde <_puts_r+0x6e>
 8002bda:	68ac      	ldr	r4, [r5, #8]
 8002bdc:	e7da      	b.n	8002b94 <_puts_r+0x24>
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <_puts_r+0xd8>)
 8002be0:	429c      	cmp	r4, r3
 8002be2:	bf08      	it	eq
 8002be4:	68ec      	ldreq	r4, [r5, #12]
 8002be6:	e7d5      	b.n	8002b94 <_puts_r+0x24>
 8002be8:	4621      	mov	r1, r4
 8002bea:	4628      	mov	r0, r5
 8002bec:	f000 f888 	bl	8002d00 <__swsetup_r>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d0dd      	beq.n	8002bb0 <_puts_r+0x40>
 8002bf4:	f04f 35ff 	mov.w	r5, #4294967295
 8002bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bfa:	07da      	lsls	r2, r3, #31
 8002bfc:	d405      	bmi.n	8002c0a <_puts_r+0x9a>
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	059b      	lsls	r3, r3, #22
 8002c02:	d402      	bmi.n	8002c0a <_puts_r+0x9a>
 8002c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c06:	f000 faa2 	bl	800314e <__retarget_lock_release_recursive>
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da04      	bge.n	8002c1c <_puts_r+0xac>
 8002c12:	69a2      	ldr	r2, [r4, #24]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	dc06      	bgt.n	8002c26 <_puts_r+0xb6>
 8002c18:	290a      	cmp	r1, #10
 8002c1a:	d004      	beq.n	8002c26 <_puts_r+0xb6>
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	6022      	str	r2, [r4, #0]
 8002c22:	7019      	strb	r1, [r3, #0]
 8002c24:	e7c5      	b.n	8002bb2 <_puts_r+0x42>
 8002c26:	4622      	mov	r2, r4
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f000 f817 	bl	8002c5c <__swbuf_r>
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d1bf      	bne.n	8002bb2 <_puts_r+0x42>
 8002c32:	e7df      	b.n	8002bf4 <_puts_r+0x84>
 8002c34:	250a      	movs	r5, #10
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	6022      	str	r2, [r4, #0]
 8002c3c:	701d      	strb	r5, [r3, #0]
 8002c3e:	e7db      	b.n	8002bf8 <_puts_r+0x88>
 8002c40:	0800365c 	.word	0x0800365c
 8002c44:	0800367c 	.word	0x0800367c
 8002c48:	0800363c 	.word	0x0800363c

08002c4c <puts>:
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <puts+0xc>)
 8002c4e:	4601      	mov	r1, r0
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	f7ff bf8d 	b.w	8002b70 <_puts_r>
 8002c56:	bf00      	nop
 8002c58:	20000050 	.word	0x20000050

08002c5c <__swbuf_r>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	460e      	mov	r6, r1
 8002c60:	4614      	mov	r4, r2
 8002c62:	4605      	mov	r5, r0
 8002c64:	b118      	cbz	r0, 8002c6e <__swbuf_r+0x12>
 8002c66:	6983      	ldr	r3, [r0, #24]
 8002c68:	b90b      	cbnz	r3, 8002c6e <__swbuf_r+0x12>
 8002c6a:	f000 f9d1 	bl	8003010 <__sinit>
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <__swbuf_r+0x98>)
 8002c70:	429c      	cmp	r4, r3
 8002c72:	d12b      	bne.n	8002ccc <__swbuf_r+0x70>
 8002c74:	686c      	ldr	r4, [r5, #4]
 8002c76:	69a3      	ldr	r3, [r4, #24]
 8002c78:	60a3      	str	r3, [r4, #8]
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	071a      	lsls	r2, r3, #28
 8002c7e:	d52f      	bpl.n	8002ce0 <__swbuf_r+0x84>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	b36b      	cbz	r3, 8002ce0 <__swbuf_r+0x84>
 8002c84:	6923      	ldr	r3, [r4, #16]
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	b2f6      	uxtb	r6, r6
 8002c8a:	1ac0      	subs	r0, r0, r3
 8002c8c:	6963      	ldr	r3, [r4, #20]
 8002c8e:	4637      	mov	r7, r6
 8002c90:	4283      	cmp	r3, r0
 8002c92:	dc04      	bgt.n	8002c9e <__swbuf_r+0x42>
 8002c94:	4621      	mov	r1, r4
 8002c96:	4628      	mov	r0, r5
 8002c98:	f000 f926 	bl	8002ee8 <_fflush_r>
 8002c9c:	bb30      	cbnz	r0, 8002cec <__swbuf_r+0x90>
 8002c9e:	68a3      	ldr	r3, [r4, #8]
 8002ca0:	3001      	adds	r0, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	60a3      	str	r3, [r4, #8]
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	6022      	str	r2, [r4, #0]
 8002cac:	701e      	strb	r6, [r3, #0]
 8002cae:	6963      	ldr	r3, [r4, #20]
 8002cb0:	4283      	cmp	r3, r0
 8002cb2:	d004      	beq.n	8002cbe <__swbuf_r+0x62>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	07db      	lsls	r3, r3, #31
 8002cb8:	d506      	bpl.n	8002cc8 <__swbuf_r+0x6c>
 8002cba:	2e0a      	cmp	r6, #10
 8002cbc:	d104      	bne.n	8002cc8 <__swbuf_r+0x6c>
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f911 	bl	8002ee8 <_fflush_r>
 8002cc6:	b988      	cbnz	r0, 8002cec <__swbuf_r+0x90>
 8002cc8:	4638      	mov	r0, r7
 8002cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <__swbuf_r+0x9c>)
 8002cce:	429c      	cmp	r4, r3
 8002cd0:	d101      	bne.n	8002cd6 <__swbuf_r+0x7a>
 8002cd2:	68ac      	ldr	r4, [r5, #8]
 8002cd4:	e7cf      	b.n	8002c76 <__swbuf_r+0x1a>
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <__swbuf_r+0xa0>)
 8002cd8:	429c      	cmp	r4, r3
 8002cda:	bf08      	it	eq
 8002cdc:	68ec      	ldreq	r4, [r5, #12]
 8002cde:	e7ca      	b.n	8002c76 <__swbuf_r+0x1a>
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 f80c 	bl	8002d00 <__swsetup_r>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d0cb      	beq.n	8002c84 <__swbuf_r+0x28>
 8002cec:	f04f 37ff 	mov.w	r7, #4294967295
 8002cf0:	e7ea      	b.n	8002cc8 <__swbuf_r+0x6c>
 8002cf2:	bf00      	nop
 8002cf4:	0800365c 	.word	0x0800365c
 8002cf8:	0800367c 	.word	0x0800367c
 8002cfc:	0800363c 	.word	0x0800363c

08002d00 <__swsetup_r>:
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <__swsetup_r+0xcc>)
 8002d02:	b570      	push	{r4, r5, r6, lr}
 8002d04:	681d      	ldr	r5, [r3, #0]
 8002d06:	4606      	mov	r6, r0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	b125      	cbz	r5, 8002d16 <__swsetup_r+0x16>
 8002d0c:	69ab      	ldr	r3, [r5, #24]
 8002d0e:	b913      	cbnz	r3, 8002d16 <__swsetup_r+0x16>
 8002d10:	4628      	mov	r0, r5
 8002d12:	f000 f97d 	bl	8003010 <__sinit>
 8002d16:	4b2e      	ldr	r3, [pc, #184]	; (8002dd0 <__swsetup_r+0xd0>)
 8002d18:	429c      	cmp	r4, r3
 8002d1a:	d10f      	bne.n	8002d3c <__swsetup_r+0x3c>
 8002d1c:	686c      	ldr	r4, [r5, #4]
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d24:	0719      	lsls	r1, r3, #28
 8002d26:	d42c      	bmi.n	8002d82 <__swsetup_r+0x82>
 8002d28:	06dd      	lsls	r5, r3, #27
 8002d2a:	d411      	bmi.n	8002d50 <__swsetup_r+0x50>
 8002d2c:	2309      	movs	r3, #9
 8002d2e:	6033      	str	r3, [r6, #0]
 8002d30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	81a3      	strh	r3, [r4, #12]
 8002d3a:	e03e      	b.n	8002dba <__swsetup_r+0xba>
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <__swsetup_r+0xd4>)
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	d101      	bne.n	8002d46 <__swsetup_r+0x46>
 8002d42:	68ac      	ldr	r4, [r5, #8]
 8002d44:	e7eb      	b.n	8002d1e <__swsetup_r+0x1e>
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <__swsetup_r+0xd8>)
 8002d48:	429c      	cmp	r4, r3
 8002d4a:	bf08      	it	eq
 8002d4c:	68ec      	ldreq	r4, [r5, #12]
 8002d4e:	e7e6      	b.n	8002d1e <__swsetup_r+0x1e>
 8002d50:	0758      	lsls	r0, r3, #29
 8002d52:	d512      	bpl.n	8002d7a <__swsetup_r+0x7a>
 8002d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d56:	b141      	cbz	r1, 8002d6a <__swsetup_r+0x6a>
 8002d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d5c:	4299      	cmp	r1, r3
 8002d5e:	d002      	beq.n	8002d66 <__swsetup_r+0x66>
 8002d60:	4630      	mov	r0, r6
 8002d62:	f000 fa59 	bl	8003218 <_free_r>
 8002d66:	2300      	movs	r3, #0
 8002d68:	6363      	str	r3, [r4, #52]	; 0x34
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d70:	81a3      	strh	r3, [r4, #12]
 8002d72:	2300      	movs	r3, #0
 8002d74:	6063      	str	r3, [r4, #4]
 8002d76:	6923      	ldr	r3, [r4, #16]
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	81a3      	strh	r3, [r4, #12]
 8002d82:	6923      	ldr	r3, [r4, #16]
 8002d84:	b94b      	cbnz	r3, 8002d9a <__swsetup_r+0x9a>
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d90:	d003      	beq.n	8002d9a <__swsetup_r+0x9a>
 8002d92:	4621      	mov	r1, r4
 8002d94:	4630      	mov	r0, r6
 8002d96:	f000 f9ff 	bl	8003198 <__smakebuf_r>
 8002d9a:	89a0      	ldrh	r0, [r4, #12]
 8002d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002da0:	f010 0301 	ands.w	r3, r0, #1
 8002da4:	d00a      	beq.n	8002dbc <__swsetup_r+0xbc>
 8002da6:	2300      	movs	r3, #0
 8002da8:	60a3      	str	r3, [r4, #8]
 8002daa:	6963      	ldr	r3, [r4, #20]
 8002dac:	425b      	negs	r3, r3
 8002dae:	61a3      	str	r3, [r4, #24]
 8002db0:	6923      	ldr	r3, [r4, #16]
 8002db2:	b943      	cbnz	r3, 8002dc6 <__swsetup_r+0xc6>
 8002db4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002db8:	d1ba      	bne.n	8002d30 <__swsetup_r+0x30>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	0781      	lsls	r1, r0, #30
 8002dbe:	bf58      	it	pl
 8002dc0:	6963      	ldrpl	r3, [r4, #20]
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	e7f4      	b.n	8002db0 <__swsetup_r+0xb0>
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	e7f7      	b.n	8002dba <__swsetup_r+0xba>
 8002dca:	bf00      	nop
 8002dcc:	20000050 	.word	0x20000050
 8002dd0:	0800365c 	.word	0x0800365c
 8002dd4:	0800367c 	.word	0x0800367c
 8002dd8:	0800363c 	.word	0x0800363c

08002ddc <__sflush_r>:
 8002ddc:	898a      	ldrh	r2, [r1, #12]
 8002dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de2:	4605      	mov	r5, r0
 8002de4:	0710      	lsls	r0, r2, #28
 8002de6:	460c      	mov	r4, r1
 8002de8:	d458      	bmi.n	8002e9c <__sflush_r+0xc0>
 8002dea:	684b      	ldr	r3, [r1, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dc05      	bgt.n	8002dfc <__sflush_r+0x20>
 8002df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	dc02      	bgt.n	8002dfc <__sflush_r+0x20>
 8002df6:	2000      	movs	r0, #0
 8002df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	d0f9      	beq.n	8002df6 <__sflush_r+0x1a>
 8002e02:	2300      	movs	r3, #0
 8002e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e08:	682f      	ldr	r7, [r5, #0]
 8002e0a:	602b      	str	r3, [r5, #0]
 8002e0c:	d032      	beq.n	8002e74 <__sflush_r+0x98>
 8002e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	075a      	lsls	r2, r3, #29
 8002e14:	d505      	bpl.n	8002e22 <__sflush_r+0x46>
 8002e16:	6863      	ldr	r3, [r4, #4]
 8002e18:	1ac0      	subs	r0, r0, r3
 8002e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e1c:	b10b      	cbz	r3, 8002e22 <__sflush_r+0x46>
 8002e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e20:	1ac0      	subs	r0, r0, r3
 8002e22:	2300      	movs	r3, #0
 8002e24:	4602      	mov	r2, r0
 8002e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e28:	4628      	mov	r0, r5
 8002e2a:	6a21      	ldr	r1, [r4, #32]
 8002e2c:	47b0      	blx	r6
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	d106      	bne.n	8002e42 <__sflush_r+0x66>
 8002e34:	6829      	ldr	r1, [r5, #0]
 8002e36:	291d      	cmp	r1, #29
 8002e38:	d82c      	bhi.n	8002e94 <__sflush_r+0xb8>
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <__sflush_r+0x108>)
 8002e3c:	40ca      	lsrs	r2, r1
 8002e3e:	07d6      	lsls	r6, r2, #31
 8002e40:	d528      	bpl.n	8002e94 <__sflush_r+0xb8>
 8002e42:	2200      	movs	r2, #0
 8002e44:	6062      	str	r2, [r4, #4]
 8002e46:	6922      	ldr	r2, [r4, #16]
 8002e48:	04d9      	lsls	r1, r3, #19
 8002e4a:	6022      	str	r2, [r4, #0]
 8002e4c:	d504      	bpl.n	8002e58 <__sflush_r+0x7c>
 8002e4e:	1c42      	adds	r2, r0, #1
 8002e50:	d101      	bne.n	8002e56 <__sflush_r+0x7a>
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	b903      	cbnz	r3, 8002e58 <__sflush_r+0x7c>
 8002e56:	6560      	str	r0, [r4, #84]	; 0x54
 8002e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e5a:	602f      	str	r7, [r5, #0]
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	d0ca      	beq.n	8002df6 <__sflush_r+0x1a>
 8002e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e64:	4299      	cmp	r1, r3
 8002e66:	d002      	beq.n	8002e6e <__sflush_r+0x92>
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 f9d5 	bl	8003218 <_free_r>
 8002e6e:	2000      	movs	r0, #0
 8002e70:	6360      	str	r0, [r4, #52]	; 0x34
 8002e72:	e7c1      	b.n	8002df8 <__sflush_r+0x1c>
 8002e74:	6a21      	ldr	r1, [r4, #32]
 8002e76:	2301      	movs	r3, #1
 8002e78:	4628      	mov	r0, r5
 8002e7a:	47b0      	blx	r6
 8002e7c:	1c41      	adds	r1, r0, #1
 8002e7e:	d1c7      	bne.n	8002e10 <__sflush_r+0x34>
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0c4      	beq.n	8002e10 <__sflush_r+0x34>
 8002e86:	2b1d      	cmp	r3, #29
 8002e88:	d001      	beq.n	8002e8e <__sflush_r+0xb2>
 8002e8a:	2b16      	cmp	r3, #22
 8002e8c:	d101      	bne.n	8002e92 <__sflush_r+0xb6>
 8002e8e:	602f      	str	r7, [r5, #0]
 8002e90:	e7b1      	b.n	8002df6 <__sflush_r+0x1a>
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e98:	81a3      	strh	r3, [r4, #12]
 8002e9a:	e7ad      	b.n	8002df8 <__sflush_r+0x1c>
 8002e9c:	690f      	ldr	r7, [r1, #16]
 8002e9e:	2f00      	cmp	r7, #0
 8002ea0:	d0a9      	beq.n	8002df6 <__sflush_r+0x1a>
 8002ea2:	0793      	lsls	r3, r2, #30
 8002ea4:	bf18      	it	ne
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	680e      	ldr	r6, [r1, #0]
 8002eaa:	bf08      	it	eq
 8002eac:	694b      	ldreq	r3, [r1, #20]
 8002eae:	eba6 0807 	sub.w	r8, r6, r7
 8002eb2:	600f      	str	r7, [r1, #0]
 8002eb4:	608b      	str	r3, [r1, #8]
 8002eb6:	f1b8 0f00 	cmp.w	r8, #0
 8002eba:	dd9c      	ble.n	8002df6 <__sflush_r+0x1a>
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	463a      	mov	r2, r7
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	6a21      	ldr	r1, [r4, #32]
 8002ec4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ec6:	47b0      	blx	r6
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	dc06      	bgt.n	8002eda <__sflush_r+0xfe>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	e78e      	b.n	8002df8 <__sflush_r+0x1c>
 8002eda:	4407      	add	r7, r0
 8002edc:	eba8 0800 	sub.w	r8, r8, r0
 8002ee0:	e7e9      	b.n	8002eb6 <__sflush_r+0xda>
 8002ee2:	bf00      	nop
 8002ee4:	20400001 	.word	0x20400001

08002ee8 <_fflush_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	690b      	ldr	r3, [r1, #16]
 8002eec:	4605      	mov	r5, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	b913      	cbnz	r3, 8002ef8 <_fflush_r+0x10>
 8002ef2:	2500      	movs	r5, #0
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	b118      	cbz	r0, 8002f02 <_fflush_r+0x1a>
 8002efa:	6983      	ldr	r3, [r0, #24]
 8002efc:	b90b      	cbnz	r3, 8002f02 <_fflush_r+0x1a>
 8002efe:	f000 f887 	bl	8003010 <__sinit>
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <_fflush_r+0x6c>)
 8002f04:	429c      	cmp	r4, r3
 8002f06:	d11b      	bne.n	8002f40 <_fflush_r+0x58>
 8002f08:	686c      	ldr	r4, [r5, #4]
 8002f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ef      	beq.n	8002ef2 <_fflush_r+0xa>
 8002f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f14:	07d0      	lsls	r0, r2, #31
 8002f16:	d404      	bmi.n	8002f22 <_fflush_r+0x3a>
 8002f18:	0599      	lsls	r1, r3, #22
 8002f1a:	d402      	bmi.n	8002f22 <_fflush_r+0x3a>
 8002f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f1e:	f000 f915 	bl	800314c <__retarget_lock_acquire_recursive>
 8002f22:	4628      	mov	r0, r5
 8002f24:	4621      	mov	r1, r4
 8002f26:	f7ff ff59 	bl	8002ddc <__sflush_r>
 8002f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f2c:	4605      	mov	r5, r0
 8002f2e:	07da      	lsls	r2, r3, #31
 8002f30:	d4e0      	bmi.n	8002ef4 <_fflush_r+0xc>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	059b      	lsls	r3, r3, #22
 8002f36:	d4dd      	bmi.n	8002ef4 <_fflush_r+0xc>
 8002f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f3a:	f000 f908 	bl	800314e <__retarget_lock_release_recursive>
 8002f3e:	e7d9      	b.n	8002ef4 <_fflush_r+0xc>
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <_fflush_r+0x70>)
 8002f42:	429c      	cmp	r4, r3
 8002f44:	d101      	bne.n	8002f4a <_fflush_r+0x62>
 8002f46:	68ac      	ldr	r4, [r5, #8]
 8002f48:	e7df      	b.n	8002f0a <_fflush_r+0x22>
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <_fflush_r+0x74>)
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	bf08      	it	eq
 8002f50:	68ec      	ldreq	r4, [r5, #12]
 8002f52:	e7da      	b.n	8002f0a <_fflush_r+0x22>
 8002f54:	0800365c 	.word	0x0800365c
 8002f58:	0800367c 	.word	0x0800367c
 8002f5c:	0800363c 	.word	0x0800363c

08002f60 <std>:
 8002f60:	2300      	movs	r3, #0
 8002f62:	b510      	push	{r4, lr}
 8002f64:	4604      	mov	r4, r0
 8002f66:	e9c0 3300 	strd	r3, r3, [r0]
 8002f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f6e:	6083      	str	r3, [r0, #8]
 8002f70:	8181      	strh	r1, [r0, #12]
 8002f72:	6643      	str	r3, [r0, #100]	; 0x64
 8002f74:	81c2      	strh	r2, [r0, #14]
 8002f76:	6183      	str	r3, [r0, #24]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	305c      	adds	r0, #92	; 0x5c
 8002f7e:	f7ff fdef 	bl	8002b60 <memset>
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <std+0x38>)
 8002f84:	6224      	str	r4, [r4, #32]
 8002f86:	6263      	str	r3, [r4, #36]	; 0x24
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <std+0x3c>)
 8002f8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <std+0x40>)
 8002f8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <std+0x44>)
 8002f92:	6323      	str	r3, [r4, #48]	; 0x30
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	bf00      	nop
 8002f98:	08003385 	.word	0x08003385
 8002f9c:	080033a7 	.word	0x080033a7
 8002fa0:	080033df 	.word	0x080033df
 8002fa4:	08003403 	.word	0x08003403

08002fa8 <_cleanup_r>:
 8002fa8:	4901      	ldr	r1, [pc, #4]	; (8002fb0 <_cleanup_r+0x8>)
 8002faa:	f000 b8af 	b.w	800310c <_fwalk_reent>
 8002fae:	bf00      	nop
 8002fb0:	08002ee9 	.word	0x08002ee9

08002fb4 <__sfmoreglue>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	2568      	movs	r5, #104	; 0x68
 8002fb8:	1e4a      	subs	r2, r1, #1
 8002fba:	4355      	muls	r5, r2
 8002fbc:	460e      	mov	r6, r1
 8002fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002fc2:	f000 f975 	bl	80032b0 <_malloc_r>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	b140      	cbz	r0, 8002fdc <__sfmoreglue+0x28>
 8002fca:	2100      	movs	r1, #0
 8002fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8002fd0:	300c      	adds	r0, #12
 8002fd2:	60a0      	str	r0, [r4, #8]
 8002fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fd8:	f7ff fdc2 	bl	8002b60 <memset>
 8002fdc:	4620      	mov	r0, r4
 8002fde:	bd70      	pop	{r4, r5, r6, pc}

08002fe0 <__sfp_lock_acquire>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	; (8002fe8 <__sfp_lock_acquire+0x8>)
 8002fe2:	f000 b8b3 	b.w	800314c <__retarget_lock_acquire_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	2000019c 	.word	0x2000019c

08002fec <__sfp_lock_release>:
 8002fec:	4801      	ldr	r0, [pc, #4]	; (8002ff4 <__sfp_lock_release+0x8>)
 8002fee:	f000 b8ae 	b.w	800314e <__retarget_lock_release_recursive>
 8002ff2:	bf00      	nop
 8002ff4:	2000019c 	.word	0x2000019c

08002ff8 <__sinit_lock_acquire>:
 8002ff8:	4801      	ldr	r0, [pc, #4]	; (8003000 <__sinit_lock_acquire+0x8>)
 8002ffa:	f000 b8a7 	b.w	800314c <__retarget_lock_acquire_recursive>
 8002ffe:	bf00      	nop
 8003000:	20000197 	.word	0x20000197

08003004 <__sinit_lock_release>:
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <__sinit_lock_release+0x8>)
 8003006:	f000 b8a2 	b.w	800314e <__retarget_lock_release_recursive>
 800300a:	bf00      	nop
 800300c:	20000197 	.word	0x20000197

08003010 <__sinit>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	f7ff fff0 	bl	8002ff8 <__sinit_lock_acquire>
 8003018:	69a3      	ldr	r3, [r4, #24]
 800301a:	b11b      	cbz	r3, 8003024 <__sinit+0x14>
 800301c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003020:	f7ff bff0 	b.w	8003004 <__sinit_lock_release>
 8003024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003028:	6523      	str	r3, [r4, #80]	; 0x50
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <__sinit+0x68>)
 800302c:	4a13      	ldr	r2, [pc, #76]	; (800307c <__sinit+0x6c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	62a2      	str	r2, [r4, #40]	; 0x28
 8003032:	42a3      	cmp	r3, r4
 8003034:	bf08      	it	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	4620      	mov	r0, r4
 800303a:	bf08      	it	eq
 800303c:	61a3      	streq	r3, [r4, #24]
 800303e:	f000 f81f 	bl	8003080 <__sfp>
 8003042:	6060      	str	r0, [r4, #4]
 8003044:	4620      	mov	r0, r4
 8003046:	f000 f81b 	bl	8003080 <__sfp>
 800304a:	60a0      	str	r0, [r4, #8]
 800304c:	4620      	mov	r0, r4
 800304e:	f000 f817 	bl	8003080 <__sfp>
 8003052:	2200      	movs	r2, #0
 8003054:	2104      	movs	r1, #4
 8003056:	60e0      	str	r0, [r4, #12]
 8003058:	6860      	ldr	r0, [r4, #4]
 800305a:	f7ff ff81 	bl	8002f60 <std>
 800305e:	2201      	movs	r2, #1
 8003060:	2109      	movs	r1, #9
 8003062:	68a0      	ldr	r0, [r4, #8]
 8003064:	f7ff ff7c 	bl	8002f60 <std>
 8003068:	2202      	movs	r2, #2
 800306a:	2112      	movs	r1, #18
 800306c:	68e0      	ldr	r0, [r4, #12]
 800306e:	f7ff ff77 	bl	8002f60 <std>
 8003072:	2301      	movs	r3, #1
 8003074:	61a3      	str	r3, [r4, #24]
 8003076:	e7d1      	b.n	800301c <__sinit+0xc>
 8003078:	08003638 	.word	0x08003638
 800307c:	08002fa9 	.word	0x08002fa9

08003080 <__sfp>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	4607      	mov	r7, r0
 8003084:	f7ff ffac 	bl	8002fe0 <__sfp_lock_acquire>
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <__sfp+0x84>)
 800308a:	681e      	ldr	r6, [r3, #0]
 800308c:	69b3      	ldr	r3, [r6, #24]
 800308e:	b913      	cbnz	r3, 8003096 <__sfp+0x16>
 8003090:	4630      	mov	r0, r6
 8003092:	f7ff ffbd 	bl	8003010 <__sinit>
 8003096:	3648      	adds	r6, #72	; 0x48
 8003098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800309c:	3b01      	subs	r3, #1
 800309e:	d503      	bpl.n	80030a8 <__sfp+0x28>
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	b30b      	cbz	r3, 80030e8 <__sfp+0x68>
 80030a4:	6836      	ldr	r6, [r6, #0]
 80030a6:	e7f7      	b.n	8003098 <__sfp+0x18>
 80030a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030ac:	b9d5      	cbnz	r5, 80030e4 <__sfp+0x64>
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <__sfp+0x88>)
 80030b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80030b4:	60e3      	str	r3, [r4, #12]
 80030b6:	6665      	str	r5, [r4, #100]	; 0x64
 80030b8:	f000 f847 	bl	800314a <__retarget_lock_init_recursive>
 80030bc:	f7ff ff96 	bl	8002fec <__sfp_lock_release>
 80030c0:	2208      	movs	r2, #8
 80030c2:	4629      	mov	r1, r5
 80030c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80030c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80030cc:	6025      	str	r5, [r4, #0]
 80030ce:	61a5      	str	r5, [r4, #24]
 80030d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80030d4:	f7ff fd44 	bl	8002b60 <memset>
 80030d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80030dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80030e0:	4620      	mov	r0, r4
 80030e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e4:	3468      	adds	r4, #104	; 0x68
 80030e6:	e7d9      	b.n	800309c <__sfp+0x1c>
 80030e8:	2104      	movs	r1, #4
 80030ea:	4638      	mov	r0, r7
 80030ec:	f7ff ff62 	bl	8002fb4 <__sfmoreglue>
 80030f0:	4604      	mov	r4, r0
 80030f2:	6030      	str	r0, [r6, #0]
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d1d5      	bne.n	80030a4 <__sfp+0x24>
 80030f8:	f7ff ff78 	bl	8002fec <__sfp_lock_release>
 80030fc:	230c      	movs	r3, #12
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	e7ee      	b.n	80030e0 <__sfp+0x60>
 8003102:	bf00      	nop
 8003104:	08003638 	.word	0x08003638
 8003108:	ffff0001 	.word	0xffff0001

0800310c <_fwalk_reent>:
 800310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003110:	4606      	mov	r6, r0
 8003112:	4688      	mov	r8, r1
 8003114:	2700      	movs	r7, #0
 8003116:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800311a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800311e:	f1b9 0901 	subs.w	r9, r9, #1
 8003122:	d505      	bpl.n	8003130 <_fwalk_reent+0x24>
 8003124:	6824      	ldr	r4, [r4, #0]
 8003126:	2c00      	cmp	r4, #0
 8003128:	d1f7      	bne.n	800311a <_fwalk_reent+0xe>
 800312a:	4638      	mov	r0, r7
 800312c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003130:	89ab      	ldrh	r3, [r5, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d907      	bls.n	8003146 <_fwalk_reent+0x3a>
 8003136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800313a:	3301      	adds	r3, #1
 800313c:	d003      	beq.n	8003146 <_fwalk_reent+0x3a>
 800313e:	4629      	mov	r1, r5
 8003140:	4630      	mov	r0, r6
 8003142:	47c0      	blx	r8
 8003144:	4307      	orrs	r7, r0
 8003146:	3568      	adds	r5, #104	; 0x68
 8003148:	e7e9      	b.n	800311e <_fwalk_reent+0x12>

0800314a <__retarget_lock_init_recursive>:
 800314a:	4770      	bx	lr

0800314c <__retarget_lock_acquire_recursive>:
 800314c:	4770      	bx	lr

0800314e <__retarget_lock_release_recursive>:
 800314e:	4770      	bx	lr

08003150 <__swhatbuf_r>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	460e      	mov	r6, r1
 8003154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003158:	4614      	mov	r4, r2
 800315a:	2900      	cmp	r1, #0
 800315c:	461d      	mov	r5, r3
 800315e:	b096      	sub	sp, #88	; 0x58
 8003160:	da07      	bge.n	8003172 <__swhatbuf_r+0x22>
 8003162:	2300      	movs	r3, #0
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	89b3      	ldrh	r3, [r6, #12]
 8003168:	061a      	lsls	r2, r3, #24
 800316a:	d410      	bmi.n	800318e <__swhatbuf_r+0x3e>
 800316c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003170:	e00e      	b.n	8003190 <__swhatbuf_r+0x40>
 8003172:	466a      	mov	r2, sp
 8003174:	f000 f96c 	bl	8003450 <_fstat_r>
 8003178:	2800      	cmp	r0, #0
 800317a:	dbf2      	blt.n	8003162 <__swhatbuf_r+0x12>
 800317c:	9a01      	ldr	r2, [sp, #4]
 800317e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003182:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003186:	425a      	negs	r2, r3
 8003188:	415a      	adcs	r2, r3
 800318a:	602a      	str	r2, [r5, #0]
 800318c:	e7ee      	b.n	800316c <__swhatbuf_r+0x1c>
 800318e:	2340      	movs	r3, #64	; 0x40
 8003190:	2000      	movs	r0, #0
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	b016      	add	sp, #88	; 0x58
 8003196:	bd70      	pop	{r4, r5, r6, pc}

08003198 <__smakebuf_r>:
 8003198:	898b      	ldrh	r3, [r1, #12]
 800319a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800319c:	079d      	lsls	r5, r3, #30
 800319e:	4606      	mov	r6, r0
 80031a0:	460c      	mov	r4, r1
 80031a2:	d507      	bpl.n	80031b4 <__smakebuf_r+0x1c>
 80031a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	6123      	str	r3, [r4, #16]
 80031ac:	2301      	movs	r3, #1
 80031ae:	6163      	str	r3, [r4, #20]
 80031b0:	b002      	add	sp, #8
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	466a      	mov	r2, sp
 80031b6:	ab01      	add	r3, sp, #4
 80031b8:	f7ff ffca 	bl	8003150 <__swhatbuf_r>
 80031bc:	9900      	ldr	r1, [sp, #0]
 80031be:	4605      	mov	r5, r0
 80031c0:	4630      	mov	r0, r6
 80031c2:	f000 f875 	bl	80032b0 <_malloc_r>
 80031c6:	b948      	cbnz	r0, 80031dc <__smakebuf_r+0x44>
 80031c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031cc:	059a      	lsls	r2, r3, #22
 80031ce:	d4ef      	bmi.n	80031b0 <__smakebuf_r+0x18>
 80031d0:	f023 0303 	bic.w	r3, r3, #3
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	81a3      	strh	r3, [r4, #12]
 80031da:	e7e3      	b.n	80031a4 <__smakebuf_r+0xc>
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <__smakebuf_r+0x7c>)
 80031de:	62b3      	str	r3, [r6, #40]	; 0x28
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	6020      	str	r0, [r4, #0]
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	81a3      	strh	r3, [r4, #12]
 80031ea:	9b00      	ldr	r3, [sp, #0]
 80031ec:	6120      	str	r0, [r4, #16]
 80031ee:	6163      	str	r3, [r4, #20]
 80031f0:	9b01      	ldr	r3, [sp, #4]
 80031f2:	b15b      	cbz	r3, 800320c <__smakebuf_r+0x74>
 80031f4:	4630      	mov	r0, r6
 80031f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031fa:	f000 f93b 	bl	8003474 <_isatty_r>
 80031fe:	b128      	cbz	r0, 800320c <__smakebuf_r+0x74>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	89a0      	ldrh	r0, [r4, #12]
 800320e:	4305      	orrs	r5, r0
 8003210:	81a5      	strh	r5, [r4, #12]
 8003212:	e7cd      	b.n	80031b0 <__smakebuf_r+0x18>
 8003214:	08002fa9 	.word	0x08002fa9

08003218 <_free_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4605      	mov	r5, r0
 800321c:	2900      	cmp	r1, #0
 800321e:	d043      	beq.n	80032a8 <_free_r+0x90>
 8003220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003224:	1f0c      	subs	r4, r1, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfb8      	it	lt
 800322a:	18e4      	addlt	r4, r4, r3
 800322c:	f000 f944 	bl	80034b8 <__malloc_lock>
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <_free_r+0x94>)
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	4610      	mov	r0, r2
 8003236:	b933      	cbnz	r3, 8003246 <_free_r+0x2e>
 8003238:	6063      	str	r3, [r4, #4]
 800323a:	6014      	str	r4, [r2, #0]
 800323c:	4628      	mov	r0, r5
 800323e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003242:	f000 b93f 	b.w	80034c4 <__malloc_unlock>
 8003246:	42a3      	cmp	r3, r4
 8003248:	d90a      	bls.n	8003260 <_free_r+0x48>
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	1862      	adds	r2, r4, r1
 800324e:	4293      	cmp	r3, r2
 8003250:	bf01      	itttt	eq
 8003252:	681a      	ldreq	r2, [r3, #0]
 8003254:	685b      	ldreq	r3, [r3, #4]
 8003256:	1852      	addeq	r2, r2, r1
 8003258:	6022      	streq	r2, [r4, #0]
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	6004      	str	r4, [r0, #0]
 800325e:	e7ed      	b.n	800323c <_free_r+0x24>
 8003260:	461a      	mov	r2, r3
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	b10b      	cbz	r3, 800326a <_free_r+0x52>
 8003266:	42a3      	cmp	r3, r4
 8003268:	d9fa      	bls.n	8003260 <_free_r+0x48>
 800326a:	6811      	ldr	r1, [r2, #0]
 800326c:	1850      	adds	r0, r2, r1
 800326e:	42a0      	cmp	r0, r4
 8003270:	d10b      	bne.n	800328a <_free_r+0x72>
 8003272:	6820      	ldr	r0, [r4, #0]
 8003274:	4401      	add	r1, r0
 8003276:	1850      	adds	r0, r2, r1
 8003278:	4283      	cmp	r3, r0
 800327a:	6011      	str	r1, [r2, #0]
 800327c:	d1de      	bne.n	800323c <_free_r+0x24>
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4401      	add	r1, r0
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	6053      	str	r3, [r2, #4]
 8003288:	e7d8      	b.n	800323c <_free_r+0x24>
 800328a:	d902      	bls.n	8003292 <_free_r+0x7a>
 800328c:	230c      	movs	r3, #12
 800328e:	602b      	str	r3, [r5, #0]
 8003290:	e7d4      	b.n	800323c <_free_r+0x24>
 8003292:	6820      	ldr	r0, [r4, #0]
 8003294:	1821      	adds	r1, r4, r0
 8003296:	428b      	cmp	r3, r1
 8003298:	bf01      	itttt	eq
 800329a:	6819      	ldreq	r1, [r3, #0]
 800329c:	685b      	ldreq	r3, [r3, #4]
 800329e:	1809      	addeq	r1, r1, r0
 80032a0:	6021      	streq	r1, [r4, #0]
 80032a2:	6063      	str	r3, [r4, #4]
 80032a4:	6054      	str	r4, [r2, #4]
 80032a6:	e7c9      	b.n	800323c <_free_r+0x24>
 80032a8:	bd38      	pop	{r3, r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	20000140 	.word	0x20000140

080032b0 <_malloc_r>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	1ccd      	adds	r5, r1, #3
 80032b4:	f025 0503 	bic.w	r5, r5, #3
 80032b8:	3508      	adds	r5, #8
 80032ba:	2d0c      	cmp	r5, #12
 80032bc:	bf38      	it	cc
 80032be:	250c      	movcc	r5, #12
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	4606      	mov	r6, r0
 80032c4:	db01      	blt.n	80032ca <_malloc_r+0x1a>
 80032c6:	42a9      	cmp	r1, r5
 80032c8:	d903      	bls.n	80032d2 <_malloc_r+0x22>
 80032ca:	230c      	movs	r3, #12
 80032cc:	6033      	str	r3, [r6, #0]
 80032ce:	2000      	movs	r0, #0
 80032d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d2:	f000 f8f1 	bl	80034b8 <__malloc_lock>
 80032d6:	4921      	ldr	r1, [pc, #132]	; (800335c <_malloc_r+0xac>)
 80032d8:	680a      	ldr	r2, [r1, #0]
 80032da:	4614      	mov	r4, r2
 80032dc:	b99c      	cbnz	r4, 8003306 <_malloc_r+0x56>
 80032de:	4f20      	ldr	r7, [pc, #128]	; (8003360 <_malloc_r+0xb0>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b923      	cbnz	r3, 80032ee <_malloc_r+0x3e>
 80032e4:	4621      	mov	r1, r4
 80032e6:	4630      	mov	r0, r6
 80032e8:	f000 f83c 	bl	8003364 <_sbrk_r>
 80032ec:	6038      	str	r0, [r7, #0]
 80032ee:	4629      	mov	r1, r5
 80032f0:	4630      	mov	r0, r6
 80032f2:	f000 f837 	bl	8003364 <_sbrk_r>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	d123      	bne.n	8003342 <_malloc_r+0x92>
 80032fa:	230c      	movs	r3, #12
 80032fc:	4630      	mov	r0, r6
 80032fe:	6033      	str	r3, [r6, #0]
 8003300:	f000 f8e0 	bl	80034c4 <__malloc_unlock>
 8003304:	e7e3      	b.n	80032ce <_malloc_r+0x1e>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	1b5b      	subs	r3, r3, r5
 800330a:	d417      	bmi.n	800333c <_malloc_r+0x8c>
 800330c:	2b0b      	cmp	r3, #11
 800330e:	d903      	bls.n	8003318 <_malloc_r+0x68>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	441c      	add	r4, r3
 8003314:	6025      	str	r5, [r4, #0]
 8003316:	e004      	b.n	8003322 <_malloc_r+0x72>
 8003318:	6863      	ldr	r3, [r4, #4]
 800331a:	42a2      	cmp	r2, r4
 800331c:	bf0c      	ite	eq
 800331e:	600b      	streq	r3, [r1, #0]
 8003320:	6053      	strne	r3, [r2, #4]
 8003322:	4630      	mov	r0, r6
 8003324:	f000 f8ce 	bl	80034c4 <__malloc_unlock>
 8003328:	f104 000b 	add.w	r0, r4, #11
 800332c:	1d23      	adds	r3, r4, #4
 800332e:	f020 0007 	bic.w	r0, r0, #7
 8003332:	1ac2      	subs	r2, r0, r3
 8003334:	d0cc      	beq.n	80032d0 <_malloc_r+0x20>
 8003336:	1a1b      	subs	r3, r3, r0
 8003338:	50a3      	str	r3, [r4, r2]
 800333a:	e7c9      	b.n	80032d0 <_malloc_r+0x20>
 800333c:	4622      	mov	r2, r4
 800333e:	6864      	ldr	r4, [r4, #4]
 8003340:	e7cc      	b.n	80032dc <_malloc_r+0x2c>
 8003342:	1cc4      	adds	r4, r0, #3
 8003344:	f024 0403 	bic.w	r4, r4, #3
 8003348:	42a0      	cmp	r0, r4
 800334a:	d0e3      	beq.n	8003314 <_malloc_r+0x64>
 800334c:	1a21      	subs	r1, r4, r0
 800334e:	4630      	mov	r0, r6
 8003350:	f000 f808 	bl	8003364 <_sbrk_r>
 8003354:	3001      	adds	r0, #1
 8003356:	d1dd      	bne.n	8003314 <_malloc_r+0x64>
 8003358:	e7cf      	b.n	80032fa <_malloc_r+0x4a>
 800335a:	bf00      	nop
 800335c:	20000140 	.word	0x20000140
 8003360:	20000144 	.word	0x20000144

08003364 <_sbrk_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	2300      	movs	r3, #0
 8003368:	4d05      	ldr	r5, [pc, #20]	; (8003380 <_sbrk_r+0x1c>)
 800336a:	4604      	mov	r4, r0
 800336c:	4608      	mov	r0, r1
 800336e:	602b      	str	r3, [r5, #0]
 8003370:	f7fd fe0e 	bl	8000f90 <_sbrk>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d102      	bne.n	800337e <_sbrk_r+0x1a>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	b103      	cbz	r3, 800337e <_sbrk_r+0x1a>
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	200001a0 	.word	0x200001a0

08003384 <__sread>:
 8003384:	b510      	push	{r4, lr}
 8003386:	460c      	mov	r4, r1
 8003388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800338c:	f000 f8a0 	bl	80034d0 <_read_r>
 8003390:	2800      	cmp	r0, #0
 8003392:	bfab      	itete	ge
 8003394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003396:	89a3      	ldrhlt	r3, [r4, #12]
 8003398:	181b      	addge	r3, r3, r0
 800339a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800339e:	bfac      	ite	ge
 80033a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80033a2:	81a3      	strhlt	r3, [r4, #12]
 80033a4:	bd10      	pop	{r4, pc}

080033a6 <__swrite>:
 80033a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033aa:	461f      	mov	r7, r3
 80033ac:	898b      	ldrh	r3, [r1, #12]
 80033ae:	4605      	mov	r5, r0
 80033b0:	05db      	lsls	r3, r3, #23
 80033b2:	460c      	mov	r4, r1
 80033b4:	4616      	mov	r6, r2
 80033b6:	d505      	bpl.n	80033c4 <__swrite+0x1e>
 80033b8:	2302      	movs	r3, #2
 80033ba:	2200      	movs	r2, #0
 80033bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033c0:	f000 f868 	bl	8003494 <_lseek_r>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	4632      	mov	r2, r6
 80033c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033cc:	81a3      	strh	r3, [r4, #12]
 80033ce:	4628      	mov	r0, r5
 80033d0:	463b      	mov	r3, r7
 80033d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033da:	f000 b817 	b.w	800340c <_write_r>

080033de <__sseek>:
 80033de:	b510      	push	{r4, lr}
 80033e0:	460c      	mov	r4, r1
 80033e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e6:	f000 f855 	bl	8003494 <_lseek_r>
 80033ea:	1c43      	adds	r3, r0, #1
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	bf15      	itete	ne
 80033f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80033f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033fa:	81a3      	strheq	r3, [r4, #12]
 80033fc:	bf18      	it	ne
 80033fe:	81a3      	strhne	r3, [r4, #12]
 8003400:	bd10      	pop	{r4, pc}

08003402 <__sclose>:
 8003402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003406:	f000 b813 	b.w	8003430 <_close_r>
	...

0800340c <_write_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	2200      	movs	r2, #0
 8003416:	4d05      	ldr	r5, [pc, #20]	; (800342c <_write_r+0x20>)
 8003418:	602a      	str	r2, [r5, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	f7fd fd6b 	bl	8000ef6 <_write>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d102      	bne.n	800342a <_write_r+0x1e>
 8003424:	682b      	ldr	r3, [r5, #0]
 8003426:	b103      	cbz	r3, 800342a <_write_r+0x1e>
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	bd38      	pop	{r3, r4, r5, pc}
 800342c:	200001a0 	.word	0x200001a0

08003430 <_close_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	2300      	movs	r3, #0
 8003434:	4d05      	ldr	r5, [pc, #20]	; (800344c <_close_r+0x1c>)
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	f7fd fd77 	bl	8000f2e <_close>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d102      	bne.n	800344a <_close_r+0x1a>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	b103      	cbz	r3, 800344a <_close_r+0x1a>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	200001a0 	.word	0x200001a0

08003450 <_fstat_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	2300      	movs	r3, #0
 8003454:	4d06      	ldr	r5, [pc, #24]	; (8003470 <_fstat_r+0x20>)
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	602b      	str	r3, [r5, #0]
 800345e:	f7fd fd71 	bl	8000f44 <_fstat>
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	d102      	bne.n	800346c <_fstat_r+0x1c>
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	b103      	cbz	r3, 800346c <_fstat_r+0x1c>
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	bd38      	pop	{r3, r4, r5, pc}
 800346e:	bf00      	nop
 8003470:	200001a0 	.word	0x200001a0

08003474 <_isatty_r>:
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	2300      	movs	r3, #0
 8003478:	4d05      	ldr	r5, [pc, #20]	; (8003490 <_isatty_r+0x1c>)
 800347a:	4604      	mov	r4, r0
 800347c:	4608      	mov	r0, r1
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	f7fd fd6f 	bl	8000f62 <_isatty>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d102      	bne.n	800348e <_isatty_r+0x1a>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b103      	cbz	r3, 800348e <_isatty_r+0x1a>
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	200001a0 	.word	0x200001a0

08003494 <_lseek_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4604      	mov	r4, r0
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	2200      	movs	r2, #0
 800349e:	4d05      	ldr	r5, [pc, #20]	; (80034b4 <_lseek_r+0x20>)
 80034a0:	602a      	str	r2, [r5, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7fd fd67 	bl	8000f76 <_lseek>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d102      	bne.n	80034b2 <_lseek_r+0x1e>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b103      	cbz	r3, 80034b2 <_lseek_r+0x1e>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	200001a0 	.word	0x200001a0

080034b8 <__malloc_lock>:
 80034b8:	4801      	ldr	r0, [pc, #4]	; (80034c0 <__malloc_lock+0x8>)
 80034ba:	f7ff be47 	b.w	800314c <__retarget_lock_acquire_recursive>
 80034be:	bf00      	nop
 80034c0:	20000198 	.word	0x20000198

080034c4 <__malloc_unlock>:
 80034c4:	4801      	ldr	r0, [pc, #4]	; (80034cc <__malloc_unlock+0x8>)
 80034c6:	f7ff be42 	b.w	800314e <__retarget_lock_release_recursive>
 80034ca:	bf00      	nop
 80034cc:	20000198 	.word	0x20000198

080034d0 <_read_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4604      	mov	r4, r0
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	2200      	movs	r2, #0
 80034da:	4d05      	ldr	r5, [pc, #20]	; (80034f0 <_read_r+0x20>)
 80034dc:	602a      	str	r2, [r5, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	f7fd fcec 	bl	8000ebc <_read>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	d102      	bne.n	80034ee <_read_r+0x1e>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	b103      	cbz	r3, 80034ee <_read_r+0x1e>
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	bd38      	pop	{r3, r4, r5, pc}
 80034f0:	200001a0 	.word	0x200001a0

080034f4 <_init>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	bf00      	nop
 80034f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fa:	bc08      	pop	{r3}
 80034fc:	469e      	mov	lr, r3
 80034fe:	4770      	bx	lr

08003500 <_fini>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	bf00      	nop
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr
